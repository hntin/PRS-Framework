/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uit.tkorg.pr.gui;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import uit.tkorg.pr.constant.ImportFiles;
import uit.tkorg.pr.constant.Options;
import uit.tkorg.pr.controller.PRSCentralController;
import uit.tkorg.pr.model.Author;
import uit.tkorg.utility.general.NumericUtility;

/**
 *
 * @author Zoe
 */
public class MainFramePRS extends javax.swing.JFrame {

    /**
     * Creates new form MainFramePRS
     */
    private PRSCentralController controller;
    private String[] response;
    private List previousEvaluation = new ArrayList<String>();
    private List previousRecommdendation = new ArrayList<HashMap<String, Author>>();
    private static int numOfFiles = 0;// kiem tra nguoi dung co chon du so file theo yeu cau cua chuong trinh k
    private static int status; // 0: import data, 1: choose algorithm recommend, 2: choose method evaluate

    private HashSet<Integer> algorithm_Recommendation = new HashSet<>();
    private HashSet<Integer> measure_Evaluation = new HashSet<>();

    //<editor-fold defaultstate="collapsed" desc="Dialog Config Algorithm">
    private DialogConfigCB dialogConfigCB = new DialogConfigCB(this, rootPaneCheckingEnabled);
    private DialogConfigCFCosine dialogConfigCFCosine = new DialogConfigCFCosine(this, rootPaneCheckingEnabled);
    private DialogConfigCFPearson dialogConfigCFPearson = new DialogConfigCFPearson(this, rootPaneCheckingEnabled);
    private DialogConfigCFSVD dialogConfigCFSVD = new DialogConfigCFSVD(this, rootPaneCheckingEnabled);
    private DialogConfigHybrid dialogConfigHybrid = new DialogConfigHybrid(this, rootPaneCheckingEnabled);
    //</editor-fold>

    public MainFramePRS() {
        initComponents();
        controller = new PRSCentralController();
        config_CB_Button.setVisible(false);
        config_CFC_Button.setVisible(false);
        config_CFP_Button.setVisible(false);
        config_CFS_Button.setVisible(false);
        config_HB_Button.setVisible(false);
        redirectSystemStreams();
    }

    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                console_TextArea.append(text);
            }
        });
    }

    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        resetButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        TF_IDFButton = new javax.swing.JButton();
        visualizeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        console_TextArea = new javax.swing.JTextArea();
        status_Panel = new javax.swing.JPanel();
        status_Label = new javax.swing.JLabel();
        Steps_TabbedPane = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaAuthor = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextAreaAuthorPaper = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextAreaAuthorCitePaper = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextAreaPaper = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextAreaPaperPaper = new javax.swing.JTextArea();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextAreaGroundTruth = new javax.swing.JTextArea();
        jPanel17 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        fileAuthor_Button = new javax.swing.JButton();
        filePaper_Button = new javax.swing.JButton();
        fileAuthorPaper_Button = new javax.swing.JButton();
        filePaperCitePaper_Button = new javax.swing.JButton();
        fileAuthorCitePaper_Button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        fileGroundTruth_Button = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        import_DataSource_Button = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        import_DatasetExample_Button = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        CB_CheckBox = new javax.swing.JCheckBox();
        CFP_CheckBox = new javax.swing.JCheckBox();
        CFC_CheckBox = new javax.swing.JCheckBox();
        CFS_CheckBox = new javax.swing.JCheckBox();
        HB_CheckBox = new javax.swing.JCheckBox();
        config_CB_Button = new javax.swing.JButton();
        config_CFP_Button = new javax.swing.JButton();
        config_CFC_Button = new javax.swing.JButton();
        config_CFS_Button = new javax.swing.JButton();
        config_HB_Button = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        recommend_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        top_Recommend_TextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        recommended_algorithm_TextField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        precision_CheckBox = new javax.swing.JCheckBox();
        recall_CheckBox = new javax.swing.JCheckBox();
        f1_CheckBox = new javax.swing.JCheckBox();
        map_CheckBox = new javax.swing.JCheckBox();
        ndcg_CheckBox = new javax.swing.JCheckBox();
        mrr_CheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        evaluate_Button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        topRank_TextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jToolBar1.setRollover(true);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/Button-Refresh-icon.png"))); // NOI18N
        resetButton.setToolTipText("Reset Chooesed");
        resetButton.setFocusable(false);
        resetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(resetButton);
        jToolBar1.add(jSeparator1);

        TF_IDFButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/Document-Write-icon.png"))); // NOI18N
        TF_IDFButton.setToolTipText("Create TFIDF Files");
        TF_IDFButton.setFocusable(false);
        TF_IDFButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TF_IDFButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TF_IDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_IDFButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(TF_IDFButton);

        visualizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/chart-bar.png"))); // NOI18N
        visualizeButton.setToolTipText("Visualize");
        visualizeButton.setFocusable(false);
        visualizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        visualizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        visualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(visualizeButton);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 365, Short.MAX_VALUE)
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));

        console_TextArea.setColumns(20);
        console_TextArea.setRows(5);
        jScrollPane3.setViewportView(console_TextArea);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        status_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        status_Panel.setPreferredSize(new java.awt.Dimension(400, 30));

        javax.swing.GroupLayout status_PanelLayout = new javax.swing.GroupLayout(status_Panel);
        status_Panel.setLayout(status_PanelLayout);
        status_PanelLayout.setHorizontalGroup(
            status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        status_PanelLayout.setVerticalGroup(
            status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Description"));

        jTextAreaAuthor.setColumns(20);
        jTextAreaAuthor.setLineWrap(true);
        jTextAreaAuthor.setRows(5);
        jTextAreaAuthor.setText("File Authors.csv là file dán nhãn sẵn, mô tả thông tin nhà nghiên cứu bao gồm id va tên có định dạng:\nIdAuthor|||NameAuthor\nVí dụ:\n1|||John F. Young\n2|||Sule Yildirim\n3|||Elizabeth K. Reilly\n4|||Yann Le Gorrec");
        jTextAreaAuthor.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaAuthor);

        jTabbedPane4.addTab("File Authors", jScrollPane1);

        jTextAreaAuthorPaper.setColumns(20);
        jTextAreaAuthorPaper.setLineWrap(true);
        jTextAreaAuthorPaper.setRows(5);
        jTextAreaAuthorPaper.setText("File AuthorPaper.csv chứa thông tin về những bài báo tác giả đã viết và có định dạng:\nIdAuthor|||IdPaper\nVí dụ:\n1|||11\n1|||12\n1|||13\n1|||14\n2|||21\n2|||22\n3|||31\n4|||41\n4|||42");
        jTextAreaAuthorPaper.setWrapStyleWord(true);
        jScrollPane10.setViewportView(jTextAreaAuthorPaper);

        jTabbedPane4.addTab("File Author_ Paper", jScrollPane10);

        jTextAreaAuthorCitePaper.setColumns(20);
        jTextAreaAuthorCitePaper.setLineWrap(true);
        jTextAreaAuthorCitePaper.setRows(5);
        jTextAreaAuthorCitePaper.setText("File AuthorCitePape.csv chứa thông tin về những bài báo mà tác giả đã trích dẫn và có định dạng:\nIdAuthor|||IdPaper|||YearCited\nVí dụ:\n1|||11\n1|||12\n1|||13\n1|||14\n2|||21\n2|||22\n3|||31\n4|||41\n4|||42");
        jTextAreaAuthorCitePaper.setWrapStyleWord(true);
        jScrollPane11.setViewportView(jTextAreaAuthorCitePaper);

        jTabbedPane4.addTab("File Author_Cited_ paper", jScrollPane11);

        jTextAreaPaper.setColumns(20);
        jTextAreaPaper.setLineWrap(true);
        jTextAreaPaper.setRows(5);
        jTextAreaPaper.setText("File Paper.csv chứa thông tin của những bài báo và có định dạng:\nIdPaper|||TitlePaper|||ContentPaper|||YearPaper\nVí dụ:\n11|||Knowledge Discovery from Sparse Pharmacokinetic Data|||In this research effort, we show that the following hypothesis is true: The independently verified sparse information secured from the scientific literature regarding the effects of methyl mercury on mice enables us to predict the effects of the methyl mercury on humans. The Rough Sets methodology is used in this endeavor|||2000\n111|||A fusion of rough sets, modified rough sets, and genetic algorithms for hybrid diagnostic systems|||A hybrid classification system is a system composed of several intelligent techniques such that the inherent limitations of one individual technique be compensated for by the strengths of another technique. In this paper, we investigate the outline of a hybrid diagnostic system for Attention Deficit Disorder (ADD) in children. This system uses Rough Sets (RS) and Modified Rough Sets (MRS) to induce rules from examples and then uses our modified genetic algorithms to globalize the rules. Also, the classification capability of this hybrid system was compared with the behavior of (a) another hybrid classification system using RS, MRS, and the “dropping condition” approach, (b) the Interactive Dichotomizer 3 (ID3) approach, and (c) a basic genetic algorithm. The results revealed that the global rules generated by the hybrid system are more effective in classification of the testing dataset than the rules generated by the above approaches.|||1997\n112|||Rough Classification|||This article contains a new concept of approximate analysis of data, based on the idea of a “rough” set. The notion of approximate (rough) description of a set is introduced and investigated. The application to medical data analysis is shown as an example.|||1984\n113|||Developmental toxicity risk assessment: a rough sets approach|||A rough sets approach was applied to a data set consisting of animal study results and other compound characteristics to generate local and global (certain/possible) sets of rules for prediction of developmental toxicity in human subjects. A modified version of the rough sets approach is proposed to allow the construction of an approximate set of rules to use for prediction in a manner similar to that of discriminant analysis. The modified rough sets approach is superior in predictability to the original form of rough-sets methodology. In comparison to discriminant analysis, modified rough sets (approximate rules) appear to be better in overall classification, sensitivity, positive and negative predictive values. The findings were supported by applying the modified rough sets and discriminant analysis on a test data set generated from the original data set by using a resampling plan.|||1993\n114|||A Theory and Methodology of Inductive Learning|||A theory of inductive learning is presented that characterizes it as a heuristic search through a space of symbolic descriptions, generated by an application of certain inference rules to the initial observational statements (the teacher-provided examples of some concepts, or facts about a class of objects or a phenomenon). The inference rules include generalization rules, which perform generalizing transformations on descriptions, and conventional truth-preserving deductive rules (specialization and reformulation rules). The application of the inference rules to descriptions is constrained by problem background knowledge, and guided by criteria evaluating the ‘quality’ of generated inductive assertions.Based on this theory, a general methodology for learning structural descriptions from examples, called star, is described and illustrated by a problem from the area of conceptual data analysis|||1983\n115|||Rough classification|||This article contains a new concept of approximate analysis of data, based on the idea of a “rough” set. The notion of approximate (rough) description of a set is introduced and investigated. The application to medical data analysis is shown as an example.|||1999\n116|||LERS-a system for learning from examples based on rough sets|||The paper presents the system LERS for rule induction. The system handles inconsistencies in the input data due to its usage of rough set theory principle. Rough set theory is especially well suited to deal with inconsistencies. In this approach, inconsistencies are not corrected. Instead, system LERS computes lower and upper approximations of each concept. Then it induces certain rules and possible rules. The user has the choice to use the machine learning approach or the knowledge acquisition approach. In the first case, the system induces a single minimal discriminant description for each concept. In the second case, the system induces all rules, each in the minimal form, that can be induced from the input data. In both cases, the user has a choice between the local or global approach.|||1992\n12|||The Investigation of Mercury Presence in Human Blood: An Extrapolation from Animal Data Using Neural Networks|||In this research effort a neural network approach was used as a method of extrapolating the presence of mercury in human blood from animal data. We also investigated the effect of different data representations (As-is, Category, Simple binary, Thermometer, and Flag) on the model performance. In addition, we used the Rough Sets methodology to identify the redundant independent variables and then examined the proposed extrapolation model performance for a reduced set of independent variables. Moreover, a quality measure was introduced that revealed that the proposed extrapolation model performed extremely well for the Thermometer data representation.|||2002\n121|||Pattern development for vessel accidents: a comparison of statistical and neural computing techniques|||This paper describes a sample of over 900 vessel accidents that occurred on the lower Mississippi River. Two different techniques, one statistical and the other based on a neural network model, were used to build logical groups of accidents. The objective in building the groups was to maximize between-group variation and minimize within-group variation. The result was groups whose records were as homogenous as possible.A clustering algorithm (i.e., a non-inferential statistical technique) generated sets of three, four and five groups. A Kohenen neural network model (i.e., a self-organizing map) also generated sets of three, four and five groups. The two sets of parallel groups were radically different as to the relative number of records in each group. In other words, when the two sets of groups were constructed by the respective techniques, the membership of each comparable group within the two different sets was substantially different. Not only was the respective record count in each group substantially different, so were the descriptive statistics describing each comparable set of groups.These results have significant implications for marine policy makers. Important policy variables include safety factors such as weather, speed of current, time of operation, and location of accidents, but mandatory utilization of a voluntary vessel tracking service may be subject to debate.|||2001\n122|||An Introduction to Computing with Neural Nets|||Artificial neural net models have been studied for many years in the hope of achieving human-like performance in the fields of speech and image recognition. These models are composed of many nonlinear computational elements operating in parallel and arranged in patterns reminiscent of biological neural nets. Computational elements or nodes are connected via weights that are typically adapted during use to improve performance. There has been a recent resurgence in the field of artificial neural nets caused by new net topologies and algorithms, analog VLSI implementation techniques, and the belief that massive parallelism is essential for high performance speech and image recognition. This paper provides an introduction to the field of artificial neural nets by reviewing six important neural net models that can be used for pattern classification. These nets are highly parallel building blocks that illustrate neural net components and design principles and can be used to construct more complex systems. In addition to describing these nets, a major emphasis is placed on exploring how some existing classification and clustering algorithms can be performed using simple neuron-like components. Single-layer nets can implement algorithms required by Gaussian maximum-likelihood classifiers and optimum minimum-error classifiers for binary patterns corrupted by noise. More generally, the decision regions required by any classification algorithm can be generated in a straightforward manner by three-layer feed-forward nets|||1987");
        jTextAreaPaper.setWrapStyleWord(true);
        jScrollPane12.setViewportView(jTextAreaPaper);

        jTabbedPane4.addTab("File Papers", jScrollPane12);

        jTextAreaPaperPaper.setColumns(20);
        jTextAreaPaperPaper.setLineWrap(true);
        jTextAreaPaperPaper.setRows(5);
        jTextAreaPaperPaper.setText("File PaperCitePaper.csv cho biết thông tin bài báo nào trích dẫn bài báo nào và có định dạng:\nIdPaper|||IdPaperCited\nVí dụ:\n11|||111\n11|||112\n11|||113\n11|||114\n11|||115\n11|||116\n12|||121\n12|||122\n12|||123\n13|||131");
        jTextAreaPaperPaper.setWrapStyleWord(true);
        jScrollPane13.setViewportView(jTextAreaPaperPaper);

        jTabbedPane4.addTab("File Paper_Cited_Paper", jScrollPane13);

        jTextAreaGroundTruth.setColumns(20);
        jTextAreaGroundTruth.setLineWrap(true);
        jTextAreaGroundTruth.setRows(5);
        jTextAreaGroundTruth.setText("File GroundTruth.csv là file dữ liệu test của chương trình đã được gán nhãn sẵn.\nChứa thông tác giả trích dẫn bài báo nào. File có định dạng:\nIdAuthor||IdPaper\nVí dụ:\n1|||1\n1|||5\n1|||112\n1|||134\n1|||9\n2|||211\n2|||215\n2|||214\n2|||9\n2|||42");
        jTextAreaGroundTruth.setWrapStyleWord(true);
        jScrollPane14.setViewportView(jTextAreaGroundTruth);

        jTabbedPane4.addTab("File GroundTruth", jScrollPane14);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 920, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Source"));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Training Data"));

        fileAuthor_Button.setText("Browse...");
        fileAuthor_Button.setToolTipText("Import File Authors");
        fileAuthor_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAuthor_ButtonActionPerformed(evt);
            }
        });

        filePaper_Button.setText("Browse...");
        filePaper_Button.setToolTipText("Import File Papers");
        filePaper_Button.setPreferredSize(new java.awt.Dimension(113, 23));
        filePaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePaper_ButtonActionPerformed(evt);
            }
        });

        fileAuthorPaper_Button.setText("Browse...");
        fileAuthorPaper_Button.setToolTipText("Import File Author_Paper");
        fileAuthorPaper_Button.setPreferredSize(new java.awt.Dimension(89, 23));
        fileAuthorPaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAuthorPaper_ButtonActionPerformed(evt);
            }
        });

        filePaperCitePaper_Button.setText("Browse...");
        filePaperCitePaper_Button.setToolTipText("Import File Paper_Cited_Paper");
        filePaperCitePaper_Button.setPreferredSize(new java.awt.Dimension(113, 23));
        filePaperCitePaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePaperCitePaper_ButtonActionPerformed(evt);
            }
        });

        fileAuthorCitePaper_Button.setText("Browse...");
        fileAuthorCitePaper_Button.setToolTipText("Import File Author_Cited_Paper");
        fileAuthorCitePaper_Button.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        fileAuthorCitePaper_Button.setPreferredSize(new java.awt.Dimension(89, 23));
        fileAuthorCitePaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAuthorCitePaper_ButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("File Authors:");

        jLabel5.setText("File Author_Paper:");

        jLabel6.setText("File Paper_Cited_Paper:");

        jLabel7.setText("File Author_Cited_Paper:");

        jLabel8.setText("File Papers:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileAuthor_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel6))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileAuthorPaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(filePaperCitePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileAuthorCitePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fileAuthor_Button)
                    .addComponent(jLabel5)
                    .addComponent(fileAuthorPaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(fileAuthorCitePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(filePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(filePaperCitePaper_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Testing Data"));

        fileGroundTruth_Button.setText("Browse...");
        fileGroundTruth_Button.setToolTipText("Import File GroundTruth");
        fileGroundTruth_Button.setMaximumSize(new java.awt.Dimension(85, 23));
        fileGroundTruth_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileGroundTruth_ButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("File GroundTruth:");

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9)
            .addComponent(fileGroundTruth_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileGroundTruth_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        import_DataSource_Button.setText("Run");
        import_DataSource_Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        import_DataSource_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_DataSource_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(import_DataSource_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(import_DataSource_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Example"));

        import_DatasetExample_Button.setText("Using Dataset Example");
        import_DatasetExample_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_DatasetExample_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(import_DatasetExample_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(import_DatasetExample_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 927, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Steps_TabbedPane.addTab("Import Data", jPanel6);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Algorithm"));

        CB_CheckBox.setText("Content based");
        CB_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_CheckBoxActionPerformed(evt);
            }
        });

        CFP_CheckBox.setText("CF with Pearson");
        CFP_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFP_CheckBoxActionPerformed(evt);
            }
        });

        CFC_CheckBox.setText("CF with Cosine");
        CFC_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFC_CheckBoxActionPerformed(evt);
            }
        });

        CFS_CheckBox.setText("CF with SVD");
        CFS_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFS_CheckBoxActionPerformed(evt);
            }
        });

        HB_CheckBox.setText("Hybrid");
        HB_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HB_CheckBoxActionPerformed(evt);
            }
        });

        config_CB_Button.setText("Configuration");
        config_CB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_CB_ButtonActionPerformed(evt);
            }
        });

        config_CFP_Button.setText("Configuration");
        config_CFP_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_CFP_ButtonActionPerformed(evt);
            }
        });

        config_CFC_Button.setText("Configuration");
        config_CFC_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_CFC_ButtonActionPerformed(evt);
            }
        });

        config_CFS_Button.setText("Configuration");
        config_CFS_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_CFS_ButtonActionPerformed(evt);
            }
        });

        config_HB_Button.setText("Configuration");
        config_HB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_HB_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CB_CheckBox)
                    .addComponent(CFP_CheckBox)
                    .addComponent(CFC_CheckBox)
                    .addComponent(HB_CheckBox)
                    .addComponent(CFS_CheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(config_CFC_Button)
                    .addComponent(config_CFP_Button)
                    .addComponent(config_CB_Button)
                    .addComponent(config_HB_Button)
                    .addComponent(config_CFS_Button))
                .addGap(36, 36, 36))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(config_CB_Button)
                    .addComponent(CB_CheckBox))
                .addGap(19, 19, 19)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CFP_CheckBox)
                    .addComponent(config_CFP_Button))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CFC_CheckBox)
                    .addComponent(config_CFC_Button))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CFS_CheckBox)
                    .addComponent(config_CFS_Button))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HB_CheckBox)
                    .addComponent(config_HB_Button))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Recommend List"));

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No", "Author Id", "Recommend List"
            }
        ));
        jScrollPane9.setViewportView(jTable7);

        jTabbedPane2.addTab("Content based", jScrollPane9);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No", "Author Id", "Recommend List"
            }
        ));
        jScrollPane15.setViewportView(jTable8);

        jTabbedPane2.addTab("CF with Pearson", jScrollPane15);

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No", "Author Id", "Recommend List"
            }
        ));
        jScrollPane16.setViewportView(jTable9);

        jTabbedPane2.addTab("CF with Cosine", jScrollPane16);

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No", "Author Id", "Recommend List"
            }
        ));
        jScrollPane17.setViewportView(jTable10);

        jTabbedPane2.addTab("CF with SVD", jScrollPane17);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No", "Author Id", "Recommend List"
            }
        ));
        jScrollPane18.setViewportView(jTable11);

        jTabbedPane2.addTab("Hybrid", jScrollPane18);

        jButton2.setText("Save");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 510, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 27, Short.MAX_VALUE)))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        recommend_Button.setText("Recommend");
        recommend_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommend_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Top Recommendation:");

        top_Recommend_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                top_Recommend_TextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recommend_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(top_Recommend_TextField)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(top_Recommend_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recommend_Button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );

        Steps_TabbedPane.addTab("Recommendation", jPanel7);

        jLabel2.setText("Recommended Algorithms");

        recommended_algorithm_TextField.setEditable(false);
        recommended_algorithm_TextField.setBackground(new java.awt.Color(255, 255, 255));
        recommended_algorithm_TextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Method Evaluation"));

        precision_CheckBox.setText("Precision");

        recall_CheckBox.setText("Recall");

        f1_CheckBox.setText("F1");

        map_CheckBox.setText("MAP");

        ndcg_CheckBox.setText("NDCG");

        mrr_CheckBox.setText("MRR");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recall_CheckBox)
                    .addComponent(precision_CheckBox)
                    .addComponent(f1_CheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(map_CheckBox)
                    .addComponent(ndcg_CheckBox)
                    .addComponent(mrr_CheckBox))
                .addGap(36, 36, 36))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precision_CheckBox)
                    .addComponent(map_CheckBox))
                .addGap(32, 32, 32)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recall_CheckBox)
                    .addComponent(ndcg_CheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f1_CheckBox)
                    .addComponent(mrr_CheckBox))
                .addGap(17, 17, 17))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Result Evaluation"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Recommendation Algorithm", "Evaluation Measure", "Evaluated Result", "Top Rank"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton3.setText("Save");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        evaluate_Button.setText("Evaluation");
        evaluate_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluate_ButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Top Rank");

        topRank_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                topRank_TextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(evaluate_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(topRank_TextField))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topRank_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(evaluate_Button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recommended_algorithm_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(recommended_algorithm_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(159, 159, 159))
        );

        Steps_TabbedPane.addTab("Evaluation", jPanel4);

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Reset System");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("Exit");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        jMenuItem1.setText("Build TF-IDF File");
        jMenu2.add(jMenuItem1);

        jMenuItem4.setText("Visualize");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Help");

        jMenuItem6.setText("How to use program");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Javadoc Reference");
        jMenu4.add(jMenuItem7);

        jMenuItem8.setText("About");
        jMenu4.add(jMenuItem8);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Steps_TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(status_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Steps_TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 367, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TF_IDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_IDFButtonActionPerformed

    }//GEN-LAST:event_TF_IDFButtonActionPerformed

    private void visualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeButtonActionPerformed

    }//GEN-LAST:event_visualizeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed

    }//GEN-LAST:event_resetButtonActionPerformed

    private void CB_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_CheckBoxActionPerformed
        if (CB_CheckBox.isSelected()) {
            config_CB_Button.setVisible(true);
        } else {
            config_CB_Button.setVisible(false);
        }
    }//GEN-LAST:event_CB_CheckBoxActionPerformed

    private void fileGroundTruth_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileGroundTruth_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            try {
                CheckError.CheckImportData(ImportFiles.FILE_GROUNDTRUTH, path);
                String fileLog = "Temp\\log.txt";
                if (!new File(fileLog).exists()) {
                    controller.fileNameGroundTruth = path;
                    console_TextArea.append(path + "\n");
                    numOfFiles++;
                } else {
                    FileReader file = new FileReader(new File(fileLog));
                    BufferedReader textReader = new BufferedReader(file);
                    StringBuilder error = new StringBuilder();
                    String line = null;
                    while ((line = textReader.readLine()) != null) {
                        error.append(line).append("\n");
                    }
                    file.close();
                    JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                    GuiUtilities.deleteFile(fileLog);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_fileGroundTruth_ButtonActionPerformed

    private void fileAuthorCitePaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAuthorCitePaper_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            try {
                CheckError.CheckImportData(ImportFiles.FILE_AUTHOR_CITE_PAPER, path);
                String fileLog = "Temp\\log.txt";
                if (!new File(fileLog).exists()) {
                    controller.fileNameAuthorCitePaper = path;
                    console_TextArea.append(path + "\n");
                    numOfFiles++;
                } else {
                    FileReader file = new FileReader(new File(fileLog));
                    BufferedReader textReader = new BufferedReader(file);
                    StringBuilder error = new StringBuilder();
                    String line = null;
                    while ((line = textReader.readLine()) != null) {
                        error.append(line).append("\n");
                    }
                    file.close();
                    JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                    GuiUtilities.deleteFile(fileLog);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_fileAuthorCitePaper_ButtonActionPerformed

    private void filePaperCitePaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePaperCitePaper_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            try {
                CheckError.CheckImportData(ImportFiles.FILE_PAPER_CITE_PAPER, path);
                String fileLog = "Temp\\log.txt";
                if (!new File(fileLog).exists()) {
                    controller.fileNamePaperCitePaper = path;
                    console_TextArea.append(path + "\n");
                    numOfFiles++;
                } else {
                    FileReader file = new FileReader(new File(fileLog));
                    BufferedReader textReader = new BufferedReader(file);
                    StringBuilder error = new StringBuilder();
                    String line = null;
                    while ((line = textReader.readLine()) != null) {
                        error.append(line).append("\n");
                    }
                    file.close();
                    JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                    GuiUtilities.deleteFile(fileLog);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_filePaperCitePaper_ButtonActionPerformed

    private void fileAuthorPaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAuthorPaper_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            try {
                CheckError.CheckImportData(ImportFiles.FILE_AUTHOR_PAPER, path);
                String fileLog = "Temp\\log.txt";
                if (!new File(fileLog).exists()) {
                    controller.fileNameAuthorPaper = path;
                    console_TextArea.append(path + "\n");
                    numOfFiles++;
                } else {
                    StringBuilder error;
                    try (FileReader file = new FileReader(new File(fileLog))) {
                        BufferedReader textReader = new BufferedReader(file);
                        error = new StringBuilder();
                        String line = null;
                        while ((line = textReader.readLine()) != null) {
                            error.append(line).append("\n");
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                    GuiUtilities.deleteFile(fileLog);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_fileAuthorPaper_ButtonActionPerformed

    private void filePaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePaper_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            try {
                CheckError.CheckImportData(ImportFiles.FILE_PAPERS, path);
                String fileLog = "Temp\\log.txt";
                if (!new File(fileLog).exists()) {
                    controller.fileNamePapers = path;
                    console_TextArea.append(path + "\n");
                    numOfFiles++;
                } else {
                    FileReader file = new FileReader(new File(fileLog));
                    BufferedReader textReader = new BufferedReader(file);
                    StringBuilder error = new StringBuilder();
                    String line = null;
                    while ((line = textReader.readLine()) != null) {
                        error.append(line).append("\n");
                    }
                    file.close();
                    JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                    GuiUtilities.deleteFile(fileLog);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_filePaper_ButtonActionPerformed

    private void fileAuthor_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAuthor_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            try {
                CheckError.CheckImportData(ImportFiles.FILE_AUTHORS, path);
                String fileLog = "Temp\\log.txt";

                if (!new File(fileLog).exists()) {
                    controller.fileNameAuthors = path;
                    console_TextArea.append(path + "\n");
                    numOfFiles++;
                } else {
                    StringBuilder error;
                    try (FileReader file = new FileReader(new File(fileLog))) {
                        BufferedReader textReader = new BufferedReader(file);
                        error = new StringBuilder();
                        String line = null;
                        while ((line = textReader.readLine()) != null) {
                            error.append(line).append("\n");
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                    GuiUtilities.deleteFile(fileLog);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_fileAuthor_ButtonActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        try {
            String path = new File("").getAbsolutePath() + "\\Paper Recommendation Framework\\Paper Recommendation Framework.chm";
            File file = new File(path);

            if (file.exists()) {
                Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + path);
            } else {
                throw new Exception("File \"Help.chm\" not found!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Notice", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void config_CFP_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_CFP_ButtonActionPerformed
        dialogConfigCFPearson.setLocationRelativeTo(this);
        dialogConfigCFPearson.show();
    }//GEN-LAST:event_config_CFP_ButtonActionPerformed

    private void config_CB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_CB_ButtonActionPerformed
        dialogConfigCB.setLocationRelativeTo(this);
        dialogConfigCB.show();
    }//GEN-LAST:event_config_CB_ButtonActionPerformed

    private void CFP_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFP_CheckBoxActionPerformed
        if (CFP_CheckBox.isSelected()) {
            config_CFP_Button.setVisible(true);
        } else {
            config_CFP_Button.setVisible(false);
        }
    }//GEN-LAST:event_CFP_CheckBoxActionPerformed

    private void CFC_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFC_CheckBoxActionPerformed
        if (CFC_CheckBox.isSelected()) {
            config_CFC_Button.setVisible(true);
        } else {
            config_CFC_Button.setVisible(false);
        }
    }//GEN-LAST:event_CFC_CheckBoxActionPerformed

    private void CFS_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFS_CheckBoxActionPerformed
        if (CFS_CheckBox.isSelected()) {
            config_CFS_Button.setVisible(true);
        } else {
            config_CFS_Button.setVisible(false);
        }
    }//GEN-LAST:event_CFS_CheckBoxActionPerformed

    private void HB_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HB_CheckBoxActionPerformed
        if (HB_CheckBox.isSelected()) {
            config_HB_Button.setVisible(true);
        } else {
            config_HB_Button.setVisible(false);
        }
    }//GEN-LAST:event_HB_CheckBoxActionPerformed

    private void import_DataSource_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_DataSource_ButtonActionPerformed
        if (numOfFiles == 6) {
            SwingWorker swingWorker;
            swingWorker = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    import_DataSource_Button.setEnabled(false);
                    console_TextArea.append("\nBegin import dataset....\n");
                    long begin = System.currentTimeMillis();
                    controller.guiHandlerRequest(Options.IMPORT_DATA);
                    console_TextArea.append("Time elapsed: " + String.valueOf((System.currentTimeMillis() - begin) / 1000) + " seconds" + "\n");
                    console_TextArea.append("End import dataset....\n");
                    return null;
                }

                @Override
                protected void done() {
                    import_DataSource_Button.setEnabled(true);
                    JOptionPane.showMessageDialog(rootPane, "Importing process is completed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                }

            };

            swingWorker.execute();

        } else {
            JOptionPane.showMessageDialog(rootPane, "There are some files which haven't choosed", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_import_DataSource_ButtonActionPerformed

    private void import_DatasetExample_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_DatasetExample_ButtonActionPerformed
        DialogDatasetExample datasetExample = new DialogDatasetExample(this, rootPaneCheckingEnabled);
        datasetExample.setLocationRelativeTo(this);
        datasetExample.show();
        boolean check = datasetExample.check;
        if (check) {
            controller.fileNameAuthors = "ExampleDataset\\Authors.csv";
            controller.fileNameAuthorPaper = "ExampleDataset\\AuthorPaper.csv";
            controller.fileNameAuthorCitePaper = "ExampleDataset\\AuthorCitePaper.csv";
            controller.fileNamePapers = "ExampleDataset\\Paper.csv";
            controller.fileNamePaperCitePaper = "ExampleDataset\\PaperCitePaper.csv";
            controller.fileNameGroundTruth = "ExampleDataset\\GroundTruth.csv";

            SwingWorker swingWorker;
            swingWorker = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    console_TextArea.append("\nBegin import dataset....\n");
                    long begin = System.currentTimeMillis();
                    controller.guiHandlerRequest(Options.IMPORT_DATA);
                    console_TextArea.append("Time elapsed: " + String.valueOf((System.currentTimeMillis() - begin) / 1000) + " seconds" + "\n");
                    console_TextArea.append("End import dataset....\n");
                    return null;
                }

                @Override
                protected void done() {
                    JOptionPane.showMessageDialog(rootPane, "Importing process is completed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                }

            };

            swingWorker.execute();

        } else {
            JOptionPane.showMessageDialog(rootPane, "No import data...", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_import_DatasetExample_ButtonActionPerformed

    private void config_CFC_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_CFC_ButtonActionPerformed
        dialogConfigCFCosine.setLocationRelativeTo(this);
        dialogConfigCFCosine.show();
    }//GEN-LAST:event_config_CFC_ButtonActionPerformed

    private void config_CFS_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_CFS_ButtonActionPerformed
        dialogConfigCFSVD.setLocationRelativeTo(this);
        dialogConfigCFSVD.show();
    }//GEN-LAST:event_config_CFS_ButtonActionPerformed

    private void config_HB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_HB_ButtonActionPerformed
        dialogConfigHybrid.setLocationRelativeTo(this);
        dialogConfigHybrid.show();
    }//GEN-LAST:event_config_HB_ButtonActionPerformed

    private void top_Recommend_TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_top_Recommend_TextFieldKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            evt.consume();
        }
    }//GEN-LAST:event_top_Recommend_TextFieldKeyTyped

    private void topRank_TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_topRank_TextFieldKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            evt.consume();
        }
    }//GEN-LAST:event_topRank_TextFieldKeyTyped

    private void evaluate_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluate_ButtonActionPerformed
        if (!topRank_TextField.getText().isEmpty()) {
            //<editor-fold defaultstate="collapsed" desc="get measure_Evaluation Set">
            if (precision_CheckBox.isSelected()) {
                measure_Evaluation.add(1);
            }
            if (recall_CheckBox.isSelected()) {
                measure_Evaluation.add(2);
            }
            if (f1_CheckBox.isSelected()) {
                measure_Evaluation.add(3);
            }
            if (map_CheckBox.isSelected()) {
                measure_Evaluation.add(4);
            }
            if (ndcg_CheckBox.isSelected()) {
                measure_Evaluation.add(5);
            }
            if (mrr_CheckBox.isSelected()) {
                measure_Evaluation.add(6);
            }
            //</editor-fold>
            //an algorithm with measure evaluate Set
            for (int i = 0; i < measure_Evaluation.size(); i++) {

            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please input Top Rank...", "Notice", JOptionPane.INFORMATION_MESSAGE);
            topRank_TextField.requestFocus();
        }
    }//GEN-LAST:event_evaluate_ButtonActionPerformed

    private void recommend_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recommend_ButtonActionPerformed
        if (!top_Recommend_TextField.getText().isEmpty()) {
            //<editor-fold defaultstate="collapsed" desc="get algorithm_Recommendation Set">
            if (CB_CheckBox.isSelected()) {
                algorithm_Recommendation.add(1);
            }
            if (CFP_CheckBox.isSelected()) {
                algorithm_Recommendation.add(2);
            }
            if (CFC_CheckBox.isSelected()) {
                algorithm_Recommendation.add(3);
            }
            if (CFS_CheckBox.isSelected()) {
                algorithm_Recommendation.add(4);
            }
            if (HB_CheckBox.isSelected()) {
                algorithm_Recommendation.add(5);
            }
            //</editor-fold>

            controller.topRecommend = Integer.parseInt(top_Recommend_TextField.getText());
            for (Integer alg : algorithm_Recommendation) {
                if (alg == 1) {
                    //content - based
                    controller.algorithm_Recommendation = 1;
                    controller.combineAuthor = dialogConfigCB.combineAuthor;
                    controller.weightingAuthor = dialogConfigCB.weightingAuthor;
                    controller.timeAware = dialogConfigCB.timeAware;
                    controller.gamma = dialogConfigCB.gamma;
                    controller.combinePaper = dialogConfigCB.combinePaper;
                    controller.weightingPaper = dialogConfigCB.weightingPaper;
                    controller.pruning = dialogConfigCB.pruning;
                    controller.guiHandlerRequest(Options.RECOMMEND);
                } else if (alg == 2) {
                    //CF using KNN Pearson
                    controller.algorithm_Recommendation = 2;
                    controller.cfMethod = 1;
                    controller.kNeighbourhood = dialogConfigCFPearson.kNeighbourhood;
                } else if (alg == 3) {
                    //CF using KNN Cosine
                    controller.algorithm_Recommendation = 2;
                    controller.cfMethod = 2;
                    controller.kNeighbourhood = dialogConfigCFCosine.kNeighbourhood;
                } else if (alg == 4) {
                    //CF using SVD
                    controller.algorithm_Recommendation = 2;
                    controller.cfMethod = 3;
                    controller.kNeighbourhood = dialogConfigCFSVD.kNeighbourhood;
                    controller.f = dialogConfigCFSVD.f;
                    controller.l = dialogConfigCFSVD.l;
                    controller.i = dialogConfigCFSVD.i;
                } else if (alg == 5) {
                    //CBFCFHybrid
                    controller.algorithm_Recommendation = 3;
                    controller.alpha=dialogConfigHybrid.alpha;
                    controller.combineHybrid=dialogConfigHybrid.combineHybrid;
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please input Top Recommendation...", "Notice", JOptionPane.INFORMATION_MESSAGE);
            top_Recommend_TextField.requestFocus();
        }
    }//GEN-LAST:event_recommend_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            System.out.println("Unable to load Windows look and feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFramePRS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CB_CheckBox;
    private javax.swing.JCheckBox CFC_CheckBox;
    private javax.swing.JCheckBox CFP_CheckBox;
    private javax.swing.JCheckBox CFS_CheckBox;
    private javax.swing.JCheckBox HB_CheckBox;
    private javax.swing.JTabbedPane Steps_TabbedPane;
    private javax.swing.JButton TF_IDFButton;
    private javax.swing.JButton config_CB_Button;
    private javax.swing.JButton config_CFC_Button;
    private javax.swing.JButton config_CFP_Button;
    private javax.swing.JButton config_CFS_Button;
    private javax.swing.JButton config_HB_Button;
    private javax.swing.JTextArea console_TextArea;
    private javax.swing.JButton evaluate_Button;
    private javax.swing.JCheckBox f1_CheckBox;
    private javax.swing.JButton fileAuthorCitePaper_Button;
    private javax.swing.JButton fileAuthorPaper_Button;
    private javax.swing.JButton fileAuthor_Button;
    private javax.swing.JButton fileGroundTruth_Button;
    private javax.swing.JButton filePaperCitePaper_Button;
    private javax.swing.JButton filePaper_Button;
    private javax.swing.JButton import_DataSource_Button;
    private javax.swing.JButton import_DatasetExample_Button;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JTextArea jTextAreaAuthor;
    private javax.swing.JTextArea jTextAreaAuthorCitePaper;
    private javax.swing.JTextArea jTextAreaAuthorPaper;
    private javax.swing.JTextArea jTextAreaGroundTruth;
    private javax.swing.JTextArea jTextAreaPaper;
    private javax.swing.JTextArea jTextAreaPaperPaper;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBox map_CheckBox;
    private javax.swing.JCheckBox mrr_CheckBox;
    private javax.swing.JCheckBox ndcg_CheckBox;
    private javax.swing.JCheckBox precision_CheckBox;
    private javax.swing.JCheckBox recall_CheckBox;
    private javax.swing.JButton recommend_Button;
    private javax.swing.JTextField recommended_algorithm_TextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel status_Label;
    private javax.swing.JPanel status_Panel;
    private javax.swing.JTextField topRank_TextField;
    private javax.swing.JTextField top_Recommend_TextField;
    private javax.swing.JButton visualizeButton;
    // End of variables declaration//GEN-END:variables
}
