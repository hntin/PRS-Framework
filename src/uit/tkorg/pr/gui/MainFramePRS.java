/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uit.tkorg.pr.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FileUtils;
import org.apache.mahout.cf.taste.common.TasteException;
import uit.tkorg.pr.constant.ImportFiles;
import uit.tkorg.pr.constant.Options;
import uit.tkorg.pr.controller.PRSCentralController;
import uit.tkorg.pr.method.cbf.FeatureVectorSimilarity;
import uit.tkorg.pr.method.cf.CF;
import uit.tkorg.pr.method.hybrid.CBFCF;
import uit.tkorg.pr.model.Author;

/**
 *
 * @author Zoe
 */
public class MainFramePRS extends javax.swing.JFrame {

    /**
     * Creates new form MainFramePRS
     */
    private PRSCentralController controller;
    //private String[] response;
    private List evaluationList = new ArrayList<String>();
    int backNext = 0;
    private List previousRecommdendation = new ArrayList<HashMap<String, Author>>();
    private static int numOfFiles = 0;// kiem tra nguoi dung co chon du so file theo yeu cau cua chuong trinh k

    boolean step1 = false;
    boolean step2 = false;
    boolean step3 = false;

    private HashSet<Integer> algorithm_Recommendation = new HashSet<>();
    private HashSet<Integer> measure_Evaluation = new HashSet<>();
    private String[] response;
    //<editor-fold defaultstate="collapsed" desc="Dialog Config Algorithm">
    private DialogConfigCB dialogConfigCB = new DialogConfigCB(this, rootPaneCheckingEnabled);
    private DialogConfigCF dialogConfigCF = new DialogConfigCF(this, rootPaneCheckingEnabled);
    private DialogConfigHybrid dialogConfigHybrid = new DialogConfigHybrid(this, rootPaneCheckingEnabled);
    //</editor-fold>

    public MainFramePRS() {
        initComponents();
        controller = new PRSCentralController();
        redirectSystemStreams();
    }

//<editor-fold defaultstate="collapsed" desc="write console to textArea">
    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                console_TextArea.setForeground(Color.red);
                console_TextArea.append(text);
                console_TextArea.setCaretPosition(console_TextArea.getText().length() - 1);
            }
        });
    }

    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }
    //</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        reset_Button = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        TFIDF_Button = new javax.swing.JButton();
        visualize_Button = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        console_TextArea = new javax.swing.JTextArea();
        status_Panel = new javax.swing.JPanel();
        status_Label = new javax.swing.JLabel();
        Steps_TabbedPane = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileAuthor_TextArea = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        fileAuthorPaper_TextArea = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        fileAuthorCitePaper_TextArea = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        filePaper_TextArea = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        filePaperCitePaper_TextArea = new javax.swing.JTextArea();
        jScrollPane14 = new javax.swing.JScrollPane();
        fileGroundTruth_TextArea = new javax.swing.JTextArea();
        jPanel17 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        fileAuthor_Button = new javax.swing.JButton();
        filePaper_Button = new javax.swing.JButton();
        fileAuthorPaper_Button = new javax.swing.JButton();
        filePaperCitePaper_Button = new javax.swing.JButton();
        fileAuthorCitePaper_Button = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        fileGroundTruth_Button = new javax.swing.JButton();
        import_DataSource_Button = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        import_DatasetExample_Button = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        CB_CheckBox = new javax.swing.JCheckBox();
        CFP_CheckBox = new javax.swing.JCheckBox();
        HB_CheckBox = new javax.swing.JCheckBox();
        config_CB_Button = new javax.swing.JButton();
        config_CF_Button = new javax.swing.JButton();
        config_HB_Button = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        recList_TabbedPane = new javax.swing.JTabbedPane();
        saveRecList_Button = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        recommend_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        top_Recommend_TextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        recommended_algorithm_TextField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        precision_CheckBox = new javax.swing.JCheckBox();
        recall_CheckBox = new javax.swing.JCheckBox();
        f1_CheckBox = new javax.swing.JCheckBox();
        map_CheckBox = new javax.swing.JCheckBox();
        ndcg_CheckBox = new javax.swing.JCheckBox();
        mrr_CheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        evaluationResult_Table = new javax.swing.JTable();
        saveEvaluation_Button = new javax.swing.JButton();
        next_Button = new javax.swing.JButton();
        back_Button = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        evaluate_Button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        topRank_TextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        file_Menu = new javax.swing.JMenu();
        resetSystem_MenuItem = new javax.swing.JMenuItem();
        exit_MenuItem = new javax.swing.JMenuItem();
        visualize_Menu = new javax.swing.JMenu();
        buildTFIDF_MenuItem = new javax.swing.JMenuItem();
        visualize_MenuItem = new javax.swing.JMenuItem();
        help_Menu = new javax.swing.JMenu();
        howtouse_MenuItem = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        about_MenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paper Recommendation System");
        setResizable(false);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        reset_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/Button-Refresh-icon.png"))); // NOI18N
        reset_Button.setToolTipText("Reset System");
        reset_Button.setFocusable(false);
        reset_Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reset_Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reset_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_ButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(reset_Button);
        jToolBar1.add(jSeparator1);

        TFIDF_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/Document-Write-icon.png"))); // NOI18N
        TFIDF_Button.setToolTipText("Build TF_IDF Files");
        TFIDF_Button.setFocusable(false);
        TFIDF_Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TFIDF_Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TFIDF_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFIDF_ButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(TFIDF_Button);

        visualize_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/chart-bar.png"))); // NOI18N
        visualize_Button.setToolTipText("Visualize");
        visualize_Button.setFocusable(false);
        visualize_Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        visualize_Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        visualize_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualize_ButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(visualize_Button);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));

        console_TextArea.setEditable(false);
        console_TextArea.setColumns(20);
        console_TextArea.setLineWrap(true);
        console_TextArea.setRows(5);
        console_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                console_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                console_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(console_TextArea);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        status_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        status_Panel.setPreferredSize(new java.awt.Dimension(400, 30));

        status_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        status_Label.setForeground(new java.awt.Color(0, 0, 102));
        status_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status_Label.setText("Welcome to Paper Recommendation System");

        javax.swing.GroupLayout status_PanelLayout = new javax.swing.GroupLayout(status_Panel);
        status_Panel.setLayout(status_PanelLayout);
        status_PanelLayout.setHorizontalGroup(
            status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        status_PanelLayout.setVerticalGroup(
            status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
        );

        Steps_TabbedPane.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Description"));

        fileAuthor_TextArea.setEditable(false);
        fileAuthor_TextArea.setColumns(20);
        fileAuthor_TextArea.setLineWrap(true);
        fileAuthor_TextArea.setRows(5);
        fileAuthor_TextArea.setText("File Authors.csv is one of file training data of program. It's assigned mark. This file descrips information about researcher which containts id researcher and his name.\nThe file is formated IdAuthor|||NameAuthor\nExample:\n1|||John F. Young\n2|||Sule Yildirim\n3|||Elizabeth K. Reilly\n4|||Yann Le Gorrec");
        fileAuthor_TextArea.setWrapStyleWord(true);
        fileAuthor_TextArea.setCaretPosition(0);
        fileAuthor_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileAuthor_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileAuthor_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(fileAuthor_TextArea);

        jTabbedPane4.addTab("File Authors", jScrollPane1);

        fileAuthorPaper_TextArea.setEditable(false);
        fileAuthorPaper_TextArea.setColumns(20);
        fileAuthorPaper_TextArea.setLineWrap(true);
        fileAuthorPaper_TextArea.setRows(5);
        fileAuthorPaper_TextArea.setText("File AuthorPaper.csv is one of the file training data of program. It's assigned mark. The file is formated IdAuthor|||IdPaper which means papers of reseacher.\nExample:\n1|||11\n1|||12\n1|||13\n1|||14\n2|||21\n2|||22\n3|||31\n4|||41\n4|||42");
        fileAuthorPaper_TextArea.setWrapStyleWord(true);
        fileAuthorPaper_TextArea.setCaretPosition(0);
        fileAuthorPaper_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileAuthorPaper_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileAuthorPaper_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane10.setViewportView(fileAuthorPaper_TextArea);

        jTabbedPane4.addTab("File Author_ Paper", jScrollPane10);

        fileAuthorCitePaper_TextArea.setEditable(false);
        fileAuthorCitePaper_TextArea.setColumns(20);
        fileAuthorCitePaper_TextArea.setLineWrap(true);
        fileAuthorCitePaper_TextArea.setRows(5);
        fileAuthorCitePaper_TextArea.setText("File AuthorCitePape.csv is one of file training data of program. It's assigned mark. The file is formated IdAuthor|||IdPaper|||YearCited.\nWe know information about reseacher cite paper and citation time of researcher in here.They are used to construct input matrix for collaborative filtering algorithm.\n\nExample:\n1|||111|||2000\n1|||112|||2000\n1|||113|||2000\n1|||114|||2000\n1|||115|||2000\n1|||116|||2000\n1|||121|||2002\n1|||122|||2002\n1|||123|||2002\n1|||131|||2004");
        fileAuthorCitePaper_TextArea.setWrapStyleWord(true);
        fileAuthorCitePaper_TextArea.setCaretPosition(0);
        fileAuthorCitePaper_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileAuthorCitePaper_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileAuthorCitePaper_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane11.setViewportView(fileAuthorCitePaper_TextArea);

        jTabbedPane4.addTab("File Author_Cited_ paper", jScrollPane11);

        filePaper_TextArea.setEditable(false);
        filePaper_TextArea.setColumns(20);
        filePaper_TextArea.setLineWrap(true);
        filePaper_TextArea.setRows(5);
        filePaper_TextArea.setText("File Paper.csv containt information about papers and is one of the file training data of program. The file is formated IdPaper|||TitlePaper|||ContentPaper|||YearPaper\nVí dụ:\n11|||Knowledge Discovery from Sparse Pharmacokinetic Data|||In this research effort, we show that the following hypothesis is true: The independently verified sparse information secured from the scientific literature regarding the effects of methyl mercury on mice enables us to predict the effects of the methyl mercury on humans. The Rough Sets methodology is used in this endeavor|||2000\n111|||A fusion of rough sets, modified rough sets, and genetic algorithms for hybrid diagnostic systems|||A hybrid classification system is a system composed of several intelligent techniques such that the inherent limitations of one individual technique be compensated for by the strengths of another technique. In this paper, we investigate the outline of a hybrid diagnostic system for Attention Deficit Disorder (ADD) in children. This system uses Rough Sets (RS) and Modified Rough Sets (MRS) to induce rules from examples and then uses our modified genetic algorithms to globalize the rules. Also, the classification capability of this hybrid system was compared with the behavior of (a) another hybrid classification system using RS, MRS, and the “dropping condition” approach, (b) the Interactive Dichotomizer 3 (ID3) approach, and (c) a basic genetic algorithm. The results revealed that the global rules generated by the hybrid system are more effective in classification of the testing dataset than the rules generated by the above approaches.|||1997\n112|||Rough Classification|||This article contains a new concept of approximate analysis of data, based on the idea of a “rough” set. The notion of approximate (rough) description of a set is introduced and investigated. The application to medical data analysis is shown as an example.|||1984\n113|||Developmental toxicity risk assessment: a rough sets approach|||A rough sets approach was applied to a data set consisting of animal study results and other compound characteristics to generate local and global (certain/possible) sets of rules for prediction of developmental toxicity in human subjects. A modified version of the rough sets approach is proposed to allow the construction of an approximate set of rules to use for prediction in a manner similar to that of discriminant analysis. The modified rough sets approach is superior in predictability to the original form of rough-sets methodology. In comparison to discriminant analysis, modified rough sets (approximate rules) appear to be better in overall classification, sensitivity, positive and negative predictive values. The findings were supported by applying the modified rough sets and discriminant analysis on a test data set generated from the original data set by using a resampling plan.|||1993\n114|||A Theory and Methodology of Inductive Learning|||A theory of inductive learning is presented that characterizes it as a heuristic search through a space of symbolic descriptions, generated by an application of certain inference rules to the initial observational statements (the teacher-provided examples of some concepts, or facts about a class of objects or a phenomenon). The inference rules include generalization rules, which perform generalizing transformations on descriptions, and conventional truth-preserving deductive rules (specialization and reformulation rules). The application of the inference rules to descriptions is constrained by problem background knowledge, and guided by criteria evaluating the ‘quality’ of generated inductive assertions.Based on this theory, a general methodology for learning structural descriptions from examples, called star, is described and illustrated by a problem from the area of conceptual data analysis|||1983\n115|||Rough classification|||This article contains a new concept of approximate analysis of data, based on the idea of a “rough” set. The notion of approximate (rough) description of a set is introduced and investigated. The application to medical data analysis is shown as an example.|||1999\n116|||LERS-a system for learning from examples based on rough sets|||The paper presents the system LERS for rule induction. The system handles inconsistencies in the input data due to its usage of rough set theory principle. Rough set theory is especially well suited to deal with inconsistencies. In this approach, inconsistencies are not corrected. Instead, system LERS computes lower and upper approximations of each concept. Then it induces certain rules and possible rules. The user has the choice to use the machine learning approach or the knowledge acquisition approach. In the first case, the system induces a single minimal discriminant description for each concept. In the second case, the system induces all rules, each in the minimal form, that can be induced from the input data. In both cases, the user has a choice between the local or global approach.|||1992\n12|||The Investigation of Mercury Presence in Human Blood: An Extrapolation from Animal Data Using Neural Networks|||In this research effort a neural network approach was used as a method of extrapolating the presence of mercury in human blood from animal data. We also investigated the effect of different data representations (As-is, Category, Simple binary, Thermometer, and Flag) on the model performance. In addition, we used the Rough Sets methodology to identify the redundant independent variables and then examined the proposed extrapolation model performance for a reduced set of independent variables. Moreover, a quality measure was introduced that revealed that the proposed extrapolation model performed extremely well for the Thermometer data representation.|||2002\n121|||Pattern development for vessel accidents: a comparison of statistical and neural computing techniques|||This paper describes a sample of over 900 vessel accidents that occurred on the lower Mississippi River. Two different techniques, one statistical and the other based on a neural network model, were used to build logical groups of accidents. The objective in building the groups was to maximize between-group variation and minimize within-group variation. The result was groups whose records were as homogenous as possible.A clustering algorithm (i.e., a non-inferential statistical technique) generated sets of three, four and five groups. A Kohenen neural network model (i.e., a self-organizing map) also generated sets of three, four and five groups. The two sets of parallel groups were radically different as to the relative number of records in each group. In other words, when the two sets of groups were constructed by the respective techniques, the membership of each comparable group within the two different sets was substantially different. Not only was the respective record count in each group substantially different, so were the descriptive statistics describing each comparable set of groups.These results have significant implications for marine policy makers. Important policy variables include safety factors such as weather, speed of current, time of operation, and location of accidents, but mandatory utilization of a voluntary vessel tracking service may be subject to debate.|||2001\n122|||An Introduction to Computing with Neural Nets|||Artificial neural net models have been studied for many years in the hope of achieving human-like performance in the fields of speech and image recognition. These models are composed of many nonlinear computational elements operating in parallel and arranged in patterns reminiscent of biological neural nets. Computational elements or nodes are connected via weights that are typically adapted during use to improve performance. There has been a recent resurgence in the field of artificial neural nets caused by new net topologies and algorithms, analog VLSI implementation techniques, and the belief that massive parallelism is essential for high performance speech and image recognition. This paper provides an introduction to the field of artificial neural nets by reviewing six important neural net models that can be used for pattern classification. These nets are highly parallel building blocks that illustrate neural net components and design principles and can be used to construct more complex systems. In addition to describing these nets, a major emphasis is placed on exploring how some existing classification and clustering algorithms can be performed using simple neuron-like components. Single-layer nets can implement algorithms required by Gaussian maximum-likelihood classifiers and optimum minimum-error classifiers for binary patterns corrupted by noise. More generally, the decision regions required by any classification algorithm can be generated in a straightforward manner by three-layer feed-forward nets|||1987");
        filePaper_TextArea.setWrapStyleWord(true);
        filePaper_TextArea.setCaretPosition(0);
        filePaper_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filePaper_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filePaper_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane12.setViewportView(filePaper_TextArea);

        jTabbedPane4.addTab("File Papers", jScrollPane12);

        filePaperCitePaper_TextArea.setEditable(false);
        filePaperCitePaper_TextArea.setColumns(20);
        filePaperCitePaper_TextArea.setLineWrap(true);
        filePaperCitePaper_TextArea.setRows(5);
        filePaperCitePaper_TextArea.setText("File PaperCitePaper.csv is assigned mark.It's one of the file training data of program. They seem citation network between paper and paper. The file is formated IdPaper|||IdPaperCited.\nExample:\n11|||111\n11|||112\n11|||113\n11|||114\n11|||115\n11|||116\n12|||121\n12|||122\n12|||123\n13|||131");
        filePaperCitePaper_TextArea.setWrapStyleWord(true);
        filePaperCitePaper_TextArea.setCaretPosition(0);
        filePaperCitePaper_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filePaperCitePaper_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filePaperCitePaper_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane13.setViewportView(filePaperCitePaper_TextArea);

        jTabbedPane4.addTab("File Paper_Cited_Paper", jScrollPane13);

        fileGroundTruth_TextArea.setEditable(false);
        fileGroundTruth_TextArea.setColumns(20);
        fileGroundTruth_TextArea.setLineWrap(true);
        fileGroundTruth_TextArea.setRows(5);
        fileGroundTruth_TextArea.setText("File GroundTruth.csv is file testing data of program.The file is assigned mark which is formated \nIdAuthor||IdPaper\nExample:\n1|||1\n1|||5\n1|||112\n1|||134\n1|||9\n2|||211\n2|||215\n2|||214\n2|||9\n2|||42");
        fileGroundTruth_TextArea.setWrapStyleWord(true);
        fileGroundTruth_TextArea.setCaretPosition(0);
        fileGroundTruth_TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileGroundTruth_TextAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileGroundTruth_TextAreaKeyTyped(evt);
            }
        });
        jScrollPane14.setViewportView(fileGroundTruth_TextArea);

        jTabbedPane4.addTab("File GroundTruth", jScrollPane14);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1007, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Source"));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Training Data"));

        fileAuthor_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fileAuthor_Button.setText("Browse...");
        fileAuthor_Button.setToolTipText("Import File Authors");
        fileAuthor_Button.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Authors", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        fileAuthor_Button.setPreferredSize(new java.awt.Dimension(85, 45));
        fileAuthor_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAuthor_ButtonActionPerformed(evt);
            }
        });

        filePaper_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        filePaper_Button.setText("Browse...");
        filePaper_Button.setToolTipText("Import File Papers");
        filePaper_Button.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Papers", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        filePaper_Button.setPreferredSize(new java.awt.Dimension(85, 45));
        filePaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePaper_ButtonActionPerformed(evt);
            }
        });

        fileAuthorPaper_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fileAuthorPaper_Button.setText("Browse...");
        fileAuthorPaper_Button.setToolTipText("Import File Author_Paper");
        fileAuthorPaper_Button.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Author_Paper", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        fileAuthorPaper_Button.setPreferredSize(new java.awt.Dimension(85, 45));
        fileAuthorPaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAuthorPaper_ButtonActionPerformed(evt);
            }
        });

        filePaperCitePaper_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        filePaperCitePaper_Button.setText("Browse...");
        filePaperCitePaper_Button.setToolTipText("Import File Paper_Cited_Paper");
        filePaperCitePaper_Button.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Paper_Cite_Paper", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        filePaperCitePaper_Button.setPreferredSize(new java.awt.Dimension(85, 23));
        filePaperCitePaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePaperCitePaper_ButtonActionPerformed(evt);
            }
        });

        fileAuthorCitePaper_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fileAuthorCitePaper_Button.setText("Browse...");
        fileAuthorCitePaper_Button.setToolTipText("Import File Author_Cited_Paper");
        fileAuthorCitePaper_Button.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Author_Cite_Paper", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        fileAuthorCitePaper_Button.setPreferredSize(new java.awt.Dimension(85, 23));
        fileAuthorCitePaper_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAuthorCitePaper_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(fileAuthor_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileAuthorPaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileAuthorCitePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePaperCitePaper_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileAuthor_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filePaper_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileAuthorPaper_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filePaperCitePaper_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileAuthorCitePaper_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Testing Data"));

        fileGroundTruth_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fileGroundTruth_Button.setText("Browse...");
        fileGroundTruth_Button.setToolTipText("Import File GroundTruth");
        fileGroundTruth_Button.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Groundtruth", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        fileGroundTruth_Button.setMaximumSize(new java.awt.Dimension(85, 23));
        fileGroundTruth_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileGroundTruth_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileGroundTruth_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileGroundTruth_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        import_DataSource_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        import_DataSource_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uit/tkorg/pr/gui/Icon/Play.png"))); // NOI18N
        import_DataSource_Button.setToolTipText("Run Import Dataset");
        import_DataSource_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_DataSource_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(import_DataSource_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(import_DataSource_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Example"));

        import_DatasetExample_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        import_DatasetExample_Button.setText("<html>Using Dataset<br><center> Example</html>");
        import_DatasetExample_Button.setToolTipText("Run Import Data From Example Dataset");
        import_DatasetExample_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_DatasetExample_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(import_DatasetExample_Button)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(import_DatasetExample_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Steps_TabbedPane.addTab("Step 1 - Importing Dataset", jPanel6);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Algorithm"));

        CB_CheckBox.setText("Content - based");
        CB_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_CheckBoxActionPerformed(evt);
            }
        });

        CFP_CheckBox.setText("Collaborative filtering");
        CFP_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFP_CheckBoxActionPerformed(evt);
            }
        });

        HB_CheckBox.setText("Hybrid");
        HB_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HB_CheckBoxActionPerformed(evt);
            }
        });

        config_CB_Button.setText("Configuration");
        config_CB_Button.setEnabled(false);
        config_CB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_CB_ButtonActionPerformed(evt);
            }
        });

        config_CF_Button.setText("Configuration");
        config_CF_Button.setEnabled(false);
        config_CF_Button.setFocusPainted(false);
        config_CF_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_CF_ButtonActionPerformed(evt);
            }
        });

        config_HB_Button.setText("Configuration");
        config_HB_Button.setEnabled(false);
        config_HB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                config_HB_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CB_CheckBox)
                            .addComponent(HB_CheckBox))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(config_CB_Button))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(config_HB_Button))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(CFP_CheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(config_CF_Button)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(config_CB_Button)
                    .addComponent(CB_CheckBox))
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CFP_CheckBox)
                    .addComponent(config_CF_Button))
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(config_HB_Button)
                    .addComponent(HB_CheckBox))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Recommendation List"));

        saveRecList_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        saveRecList_Button.setText("Save");
        saveRecList_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRecList_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 565, Short.MAX_VALUE)
                .addComponent(saveRecList_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(recList_TabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveRecList_Button))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addComponent(recList_TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 28, Short.MAX_VALUE)))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        recommend_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        recommend_Button.setText("Recommend");
        recommend_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommend_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Top Recommendation:");

        top_Recommend_TextField.setText("100");
        top_Recommend_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                top_Recommend_TextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recommend_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(top_Recommend_TextField)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(top_Recommend_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recommend_Button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        Steps_TabbedPane.addTab("Step 2 - Recommendation", jPanel7);

        jLabel2.setText("Recommended Algorithms");

        recommended_algorithm_TextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        recommended_algorithm_TextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        recommended_algorithm_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                recommended_algorithm_TextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                recommended_algorithm_TextFieldKeyTyped(evt);
            }
        });

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Evaluation Measure"));

        precision_CheckBox.setText("Precision");

        recall_CheckBox.setText("Recall");

        f1_CheckBox.setText("F1");

        map_CheckBox.setText("MAP");

        ndcg_CheckBox.setText("NDCG");

        mrr_CheckBox.setText("MRR");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(f1_CheckBox)
                    .addComponent(recall_CheckBox)
                    .addComponent(precision_CheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(map_CheckBox)
                    .addComponent(ndcg_CheckBox)
                    .addComponent(mrr_CheckBox))
                .addGap(36, 36, 36))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precision_CheckBox)
                    .addComponent(map_CheckBox))
                .addGap(24, 24, 24)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ndcg_CheckBox)
                    .addComponent(recall_CheckBox))
                .addGap(18, 27, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f1_CheckBox)
                    .addComponent(mrr_CheckBox))
                .addGap(17, 17, 17))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Evaluation Result"));

        evaluationResult_Table.setAutoCreateRowSorter(true);
        evaluationResult_Table.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        evaluationResult_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recommendation Algorithm", "Evaluation Measure", "Top Rank", "Evaluated Result"
            }
        ));
        jScrollPane2.setViewportView(evaluationResult_Table);

        saveEvaluation_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        saveEvaluation_Button.setText("Save");
        saveEvaluation_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEvaluation_ButtonActionPerformed(evt);
            }
        });

        next_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        next_Button.setText("Next >>");
        next_Button.setEnabled(false);
        next_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_ButtonActionPerformed(evt);
            }
        });

        back_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        back_Button.setText("<< Back");
        back_Button.setEnabled(false);
        back_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(back_Button)
                .addGap(18, 18, 18)
                .addComponent(next_Button)
                .addGap(18, 18, 18)
                .addComponent(saveEvaluation_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back_Button)
                    .addComponent(next_Button)
                    .addComponent(saveEvaluation_Button))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        evaluate_Button.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        evaluate_Button.setText("Evaluation");
        evaluate_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluate_ButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Top Rank");

        topRank_TextField.setText("100");
        topRank_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                topRank_TextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(evaluate_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(topRank_TextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(topRank_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(evaluate_Button)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recommended_algorithm_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(recommended_algorithm_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(155, 155, 155))
        );

        Steps_TabbedPane.addTab("Step 3 - Evaluation", jPanel4);

        file_Menu.setText("File");

        resetSystem_MenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetSystem_MenuItem.setText("Reset System");
        resetSystem_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSystem_MenuItemActionPerformed(evt);
            }
        });
        file_Menu.add(resetSystem_MenuItem);

        exit_MenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit_MenuItem.setText("Exit");
        exit_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_MenuItemActionPerformed(evt);
            }
        });
        file_Menu.add(exit_MenuItem);

        jMenuBar1.add(file_Menu);

        visualize_Menu.setText("Tools");
        visualize_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualize_MenuActionPerformed(evt);
            }
        });

        buildTFIDF_MenuItem.setText("Build TF_IDF Files");
        buildTFIDF_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildTFIDF_MenuItemActionPerformed(evt);
            }
        });
        visualize_Menu.add(buildTFIDF_MenuItem);

        visualize_MenuItem.setText("Visualize");
        visualize_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualize_MenuItemActionPerformed(evt);
            }
        });
        visualize_Menu.add(visualize_MenuItem);

        jMenuBar1.add(visualize_Menu);

        help_Menu.setText("Help");

        howtouse_MenuItem.setText("How to use program");
        howtouse_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                howtouse_MenuItemActionPerformed(evt);
            }
        });
        help_Menu.add(howtouse_MenuItem);

        jMenuItem7.setText("Javadoc Reference");
        help_Menu.add(jMenuItem7);

        about_MenuItem.setText("About");
        about_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_MenuItemActionPerformed(evt);
            }
        });
        help_Menu.add(about_MenuItem);

        jMenuBar1.add(help_Menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 1031, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Steps_TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1031, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Steps_TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(status_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TFIDF_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFIDF_ButtonActionPerformed
        DialogBuildTFIDF tf_idf = new DialogBuildTFIDF(this, rootPaneCheckingEnabled);
        tf_idf.setLocationRelativeTo(this);
        tf_idf.show();
    }//GEN-LAST:event_TFIDF_ButtonActionPerformed

    private void visualize_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualize_ButtonActionPerformed
        String path = "Temp\\EvaluationResult.txt";
        if (new File(path).exists()) {
            FileUtils.deleteQuietly(new File(path));
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < evaluationList.size(); i++) {
                stringBuilder.append(evaluationList.get(i).toString().replace("\t", ","));
            }
            try {
                FileUtils.writeStringToFile(new File(path), stringBuilder.toString(), "UTF-8", true);
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < evaluationList.size(); i++) {
                stringBuilder.append(evaluationList.get(i));
            }
            try {
                FileUtils.writeStringToFile(new File(path), stringBuilder.toString(), "UTF-8", true);
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        DialogVisualize visualize = new DialogVisualize();
        visualize.setLocationRelativeTo(this);
        visualize.show();

    }//GEN-LAST:event_visualize_ButtonActionPerformed

    private void reset_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_ButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFramePRS().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_reset_ButtonActionPerformed

    private void CB_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_CheckBoxActionPerformed
        if (CB_CheckBox.isSelected()) {
            config_CB_Button.setEnabled(true);
        } else {
            config_CB_Button.setEnabled(false);
        }
    }//GEN-LAST:event_CB_CheckBoxActionPerformed

    private void fileGroundTruth_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileGroundTruth_ButtonActionPerformed
        jTabbedPane4.setSelectedIndex(5);
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            if (new File(path).exists()) {
                try {
                    CheckError.CheckImportData(ImportFiles.FILE_GROUNDTRUTH, path);
                    String fileLog = "Temp\\log.txt";
                    if (!new File(fileLog).exists()) {
                        controller.fileNameGroundTruth = path;
                        console_TextArea.append(path + "\n");
                        numOfFiles++;
                    } else {
                        FileReader file = new FileReader(new File(fileLog));
                        BufferedReader textReader = new BufferedReader(file);
                        StringBuilder error = new StringBuilder();
                        String line = null;
                        while ((line = textReader.readLine()) != null) {
                            error.append(line).append("\n");
                        }
                        file.close();
                        JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                        GuiUtilities.deleteFile(fileLog);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "File doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileGroundTruth_ButtonActionPerformed

    private void fileAuthorCitePaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAuthorCitePaper_ButtonActionPerformed
        jTabbedPane4.setSelectedIndex(2);
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            if (new File(path).exists()) {
                try {
                    CheckError.CheckImportData(ImportFiles.FILE_AUTHOR_CITE_PAPER, path);
                    String fileLog = "Temp\\log.txt";
                    if (!new File(fileLog).exists()) {
                        controller.fileNameAuthorCitePaper = path;
                        console_TextArea.append(path + "\n");
                        numOfFiles++;
                    } else {
                        FileReader file = new FileReader(new File(fileLog));
                        BufferedReader textReader = new BufferedReader(file);
                        StringBuilder error = new StringBuilder();
                        String line = null;
                        while ((line = textReader.readLine()) != null) {
                            error.append(line).append("\n");
                        }
                        file.close();
                        JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                        GuiUtilities.deleteFile(fileLog);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "File doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileAuthorCitePaper_ButtonActionPerformed

    private void filePaperCitePaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePaperCitePaper_ButtonActionPerformed
        jTabbedPane4.setSelectedIndex(4);
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            if (new File(path).exists()) {
                try {
                    CheckError.CheckImportData(ImportFiles.FILE_PAPER_CITE_PAPER, path);
                    String fileLog = "Temp\\log.txt";
                    if (!new File(fileLog).exists()) {
                        controller.fileNamePaperCitePaper = path;
                        console_TextArea.append(path + "\n");
                        numOfFiles++;
                    } else {
                        FileReader file = new FileReader(new File(fileLog));
                        BufferedReader textReader = new BufferedReader(file);
                        StringBuilder error = new StringBuilder();
                        String line = null;
                        while ((line = textReader.readLine()) != null) {
                            error.append(line).append("\n");
                        }
                        file.close();
                        JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                        GuiUtilities.deleteFile(fileLog);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "File doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_filePaperCitePaper_ButtonActionPerformed

    private void fileAuthorPaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAuthorPaper_ButtonActionPerformed
        jTabbedPane4.setSelectedIndex(1);
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            if (new File(path).exists()) {
                try {
                    CheckError.CheckImportData(ImportFiles.FILE_AUTHOR_PAPER, path);
                    String fileLog = "Temp\\log.txt";
                    if (!new File(fileLog).exists()) {
                        controller.fileNameAuthorPaper = path;
                        console_TextArea.append(path + "\n");
                        numOfFiles++;
                    } else {
                        StringBuilder error;
                        try (FileReader file = new FileReader(new File(fileLog))) {
                            BufferedReader textReader = new BufferedReader(file);
                            error = new StringBuilder();
                            String line = null;
                            while ((line = textReader.readLine()) != null) {
                                error.append(line).append("\n");
                            }
                        }
                        JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                        GuiUtilities.deleteFile(fileLog);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "File doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileAuthorPaper_ButtonActionPerformed

    private void filePaper_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePaper_ButtonActionPerformed
        jTabbedPane4.setSelectedIndex(3);
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        if (path != null) {
            if (new File(path).exists()) {
                try {
                    CheckError.CheckImportData(ImportFiles.FILE_PAPERS, path);
                    String fileLog = "Temp\\log.txt";
                    if (!new File(fileLog).exists()) {
                        controller.fileNamePapers = path;
                        console_TextArea.append(path + "\n");
                        numOfFiles++;
                    } else {
                        FileReader file = new FileReader(new File(fileLog));
                        BufferedReader textReader = new BufferedReader(file);
                        StringBuilder error = new StringBuilder();
                        String line = null;
                        while ((line = textReader.readLine()) != null) {
                            error.append(line).append("\n");
                        }
                        file.close();
                        JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                        GuiUtilities.deleteFile(fileLog);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "File doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_filePaper_ButtonActionPerformed

    private void fileAuthor_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAuthor_ButtonActionPerformed
        String path = GuiUtilities.chooseFileJChooser("Choose File");
        jTabbedPane4.setSelectedIndex(0);
        if (path != null) {
            if (new File(path).exists()) {
                try {
                    CheckError.CheckImportData(ImportFiles.FILE_AUTHORS, path);
                    String fileLog = "Temp\\log.txt";

                    if (!new File(fileLog).exists()) {
                        controller.fileNameAuthors = path;
                        console_TextArea.append(path + "\n");
                        numOfFiles++;
                    } else {
                        StringBuilder error;
                        try (FileReader file = new FileReader(new File(fileLog))) {
                            BufferedReader textReader = new BufferedReader(file);
                            error = new StringBuilder();
                            String line = null;
                            while ((line = textReader.readLine()) != null) {
                                error.append(line).append("\n");
                            }
                        }
                        JOptionPane.showMessageDialog(rootPane, error, "Error", JOptionPane.ERROR_MESSAGE);
                        GuiUtilities.deleteFile(fileLog);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "File doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileAuthor_ButtonActionPerformed

    private void howtouse_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_howtouse_MenuItemActionPerformed

        try {
            String path = new File("").getAbsolutePath() + "\\Paper Recommendation Framework\\Paper Recommendation Framework.chm";
            File file = new File(path);

            if (file.exists()) {
                Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + path);
            } else {
                throw new Exception("File \"Help.chm\" not found!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Notice", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_howtouse_MenuItemActionPerformed

    private void config_CF_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_CF_ButtonActionPerformed
        dialogConfigCF.setLocationRelativeTo(this);
        dialogConfigCF.show();
    }//GEN-LAST:event_config_CF_ButtonActionPerformed

    private void config_CB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_CB_ButtonActionPerformed
        dialogConfigCB.setLocationRelativeTo(this);
        dialogConfigCB.show();
    }//GEN-LAST:event_config_CB_ButtonActionPerformed

    private void CFP_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFP_CheckBoxActionPerformed
        if (CFP_CheckBox.isSelected()) {
            config_CF_Button.setEnabled(true);
        } else {
            config_CF_Button.setEnabled(false);
        }
    }//GEN-LAST:event_CFP_CheckBoxActionPerformed

    private void HB_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HB_CheckBoxActionPerformed
        if (HB_CheckBox.isSelected()) {
            config_HB_Button.setEnabled(true);
        } else {
            config_HB_Button.setEnabled(false);
        }
    }//GEN-LAST:event_HB_CheckBoxActionPerformed

    private void import_DataSource_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_DataSource_ButtonActionPerformed
        if (controller.fileNameAuthors != null && controller.fileNameAuthorPaper != null
                && controller.fileNameAuthorCitePaper != null && controller.fileNamePapers != null
                && controller.fileNamePaperCitePaper != null && controller.fileNameGroundTruth != null) {
            SwingWorker swingWorker;
            swingWorker = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    import_DataSource_Button.setEnabled(false);
                    console_TextArea.append("\nBEGIN IMPORT DATASET....\n");
                    status_Label.setText("Importing dataset...");
                    long begin = System.currentTimeMillis();
                    response = controller.guiHandlerRequest(Options.IMPORT_DATA);
                    console_TextArea.append("TIME ELAPSED: " + String.valueOf((System.currentTimeMillis() - begin) / 1000) + " SECONDS" + "\n");
                    console_TextArea.append("END IMPORT DATASET....\n");
                    return null;
                }

                @Override
                protected void done() {
                    step1 = true;
                    status_Label.setText(response[0]);
                    controller.fileNameAuthors = null;
                    controller.fileNameAuthorPaper = null;
                    controller.fileNamePapers = null;
                    controller.fileNamePaperCitePaper = null;
                    controller.fileNameGroundTruth = null;
                    int comfirm = JOptionPane.showConfirmDialog(rootPane, "Importing process is successed! Go to Step 2...", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (comfirm == JOptionPane.YES_OPTION) {
                        import_DataSource_Button.setEnabled(true);
                        Steps_TabbedPane.setSelectedIndex(1);
                    } else {
                        import_DataSource_Button.setEnabled(true);
                    }
                }

            };

            swingWorker.execute();

        } else {
            JOptionPane.showMessageDialog(rootPane, "There are some files which haven't choosed", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_import_DataSource_ButtonActionPerformed

    private void import_DatasetExample_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_DatasetExample_ButtonActionPerformed
        DialogDatasetExample datasetExample = new DialogDatasetExample(this, rootPaneCheckingEnabled);
        datasetExample.setLocationRelativeTo(this);
        datasetExample.show();
        boolean check = datasetExample.check;
        if (check) {
            controller.fileNameAuthors = "ExampleDataset\\Authors.csv";
            controller.fileNameAuthorPaper = "ExampleDataset\\AuthorPaper.csv";
            controller.fileNameAuthorCitePaper = "ExampleDataset\\AuthorCitePaper.csv";
            controller.fileNamePapers = "ExampleDataset\\Papers.csv";
            controller.fileNamePaperCitePaper = "ExampleDataset\\PaperCitePaper.csv";
            controller.fileNameGroundTruth = "ExampleDataset\\GroundTruth.csv";

            SwingWorker swingWorker;
            swingWorker = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    import_DatasetExample_Button.setEnabled(false);
                    console_TextArea.append("\nBEGIN IMPORT DATASET....\n");
                    status_Label.setText("Importing dataset...");
                    long begin = System.currentTimeMillis();
                    response = controller.guiHandlerRequest(Options.IMPORT_DATA);
                    console_TextArea.append("TIME ELAPSED: " + String.valueOf((System.currentTimeMillis() - begin) / 1000) + " SECONDS" + "\n");
                    console_TextArea.append("END IMPORT DATASET....\n");
                    return null;
                }

                @Override
                protected void done() {
                    step1 = true;
                    status_Label.setText(response[0]);
                    controller.fileNameAuthors = null;
                    controller.fileNameAuthorPaper = null;
                    controller.fileNamePapers = null;
                    controller.fileNamePaperCitePaper = null;
                    controller.fileNameGroundTruth = null;
                    int comfirm = JOptionPane.showConfirmDialog(rootPane, "Importing process is successed! Go to Step 2...", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (comfirm == JOptionPane.YES_OPTION) {
                        import_DatasetExample_Button.setEnabled(true);
                        Steps_TabbedPane.setSelectedIndex(1);
                    } else {
                        import_DatasetExample_Button.setEnabled(true);
                    }
                }

            };

            swingWorker.execute();

        } else {
            JOptionPane.showMessageDialog(rootPane, "No import data...", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_import_DatasetExample_ButtonActionPerformed

    private void top_Recommend_TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_top_Recommend_TextFieldKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            evt.consume();
        }
    }//GEN-LAST:event_top_Recommend_TextFieldKeyTyped

    private void topRank_TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_topRank_TextFieldKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            evt.consume();
        }
    }//GEN-LAST:event_topRank_TextFieldKeyTyped

    private void evaluate_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluate_ButtonActionPerformed
        if (step2) {
            if (!topRank_TextField.getText().isEmpty()) {

                controller.topRank = Integer.parseInt(topRank_TextField.getText().trim());

                status_Label.setText("Evaluating...");

                //<editor-fold defaultstate="collapsed" desc="Step 1: get measure_Evaluation Set">
                measure_Evaluation.clear();
                if (precision_CheckBox.isSelected()) {
                    measure_Evaluation.add(1);
                }
                if (recall_CheckBox.isSelected()) {
                    measure_Evaluation.add(2);
                }
                if (f1_CheckBox.isSelected()) {
                    measure_Evaluation.add(3);
                }
                if (map_CheckBox.isSelected()) {
                    measure_Evaluation.add(4);
                }
                if (ndcg_CheckBox.isSelected()) {
                    measure_Evaluation.add(5);
                }
                if (mrr_CheckBox.isSelected()) {
                    measure_Evaluation.add(6);
                }
                //</editor-fold>

                if (measure_Evaluation.size() > 0) {

                    //<editor-fold defaultstate="collapsed" desc="Step 2: evaluate for algorithms">
                    StringBuilder evaluationResult = new StringBuilder();
                    for (Integer alg : algorithm_Recommendation) {
                        if (alg == 1) {
                            try {
                                FeatureVectorSimilarity.generateRecommendationForAuthorList(controller.authorsCB, controller.topRecommend);
                            } catch (Exception ex) {
                                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for (Integer measure : measure_Evaluation) {
                                controller.measure_Evaluation = measure;
                                try {
                                    evaluationResult.append("\nContent - based\t" + controller.evaluate(controller.authorsCB, measure, controller.topRank));
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        } else if (alg == 2) {
                            HashSet<Integer> cfMethodHS = new HashSet<>();
                            cfMethodHS = dialogConfigCF.cfMethodHS;
                            for (Integer cfMethod : cfMethodHS) {
                                if (cfMethod == 1) {
                                    try {
                                        CF.cfRecommendToAuthorList(controller.authorsCFP, controller.topRecommend);
                                    } catch (TasteException ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (Exception ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    for (Integer measure : measure_Evaluation) {
                                        controller.measure_Evaluation = measure;
                                        try {
                                            evaluationResult.append("\nCF using KNN Pearson\t" + controller.evaluate(controller.authorsCFP, measure, controller.topRank));
                                        } catch (Exception ex) {
                                            Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                } else if (cfMethod == 2) {
                                    try {
                                        CF.cfRecommendToAuthorList(controller.authorsCFC, controller.topRecommend);
                                    } catch (TasteException ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (Exception ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    for (Integer measure : measure_Evaluation) {
                                        controller.measure_Evaluation = measure;
                                        try {
                                            evaluationResult.append("\nCF using KNN Cosine\t" + controller.evaluate(controller.authorsCFC, measure, controller.topRank));
                                        } catch (Exception ex) {
                                            Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                } else if (cfMethod == 3) {
                                    try {
                                        CF.cfRecommendToAuthorList(controller.authorsCFSVD, controller.topRecommend);
                                    } catch (TasteException ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (Exception ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    for (Integer measure : measure_Evaluation) {
                                        controller.measure_Evaluation = measure;
                                        try {
                                            evaluationResult.append("\nCF using SVD\t" + controller.evaluate(controller.authorsCFSVD, measure, controller.topRank));
                                        } catch (Exception ex) {
                                            Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }
                            }
                        } else if (alg == 3) {
                            try {
                                CBFCF.cbfcfHybridRecommendToAuthorList(controller.authorsHybrid, controller.topRecommend);
                            } catch (TasteException ex) {
                                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (Exception ex) {
                                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for (Integer measure : measure_Evaluation) {
                                controller.measure_Evaluation = measure;
                                try {
                                    evaluationResult.append("\nHybrid\t" + controller.evaluate(controller.authorsHybrid, measure, controller.topRank));
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }

                    try {
                        FileUtils.writeStringToFile(new File("Temp\\evaluationResult.txt"), evaluationResult.toString(), "UTF8", false);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                    }
            //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="Step 3: load evaluated result to table">
                    DefaultTableModel tablemodelReset = (DefaultTableModel) evaluationResult_Table.getModel();
                    tablemodelReset.getDataVector().removeAllElements();
                    evaluationResult_Table.setModel(tablemodelReset);
                    BufferedReader reader = null;
                    try {
                        reader = new BufferedReader(new FileReader("Temp\\evaluationResult.txt"));
                        String line = null;
                        DefaultTableModel tablemodel = (DefaultTableModel) evaluationResult_Table.getModel();
                        tablemodel.getDataVector().removeAllElements();
                        evaluationResult_Table.setModel(tablemodel);
                        while ((line = reader.readLine()) != null) {
                            Vector vector = new Vector();
                            String[] str = line.split("\t");
                            if (str.length == 4) {
                                for (int i = 0; i < str.length; i++) {
                                    vector.addElement(str[i]);
                                }
                                tablemodel.addRow(vector);
                            }
                        }
                        evaluationResult_Table.setModel(tablemodel);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            reader.close();
                        } catch (IOException ex) {
                            Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    //</editor-fold>

                    evaluationList.add(evaluationResult.toString());
                    if (evaluationList.size() > 1) {
                        back_Button.setEnabled(true);
                        backNext = evaluationList.size() - 1;
                    } else {
                        back_Button.setEnabled(false);
                    }
                    step3 = true;

                    next_Button.setEnabled(false);

                    status_Label.setText("Evaluating is successed!");
                    // JOptionPane.showMessageDialog(rootPane, "Evaluating is successed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "No evaluation measures aren't choosed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Please input Top Rank...", "Notice", JOptionPane.INFORMATION_MESSAGE);
                topRank_TextField.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please recommend...", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_evaluate_ButtonActionPerformed

    private void recommend_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recommend_ButtonActionPerformed
        if (step1) {
            if (!top_Recommend_TextField.getText().isEmpty()) {

                controller.topRecommend = Integer.parseInt(top_Recommend_TextField.getText());
                recList_TabbedPane.removeAll();//reset table when recommend

                controller.authorsCB = new HashMap<>();
                controller.authorsCFP = new HashMap<>();
                controller.authorsCFC = new HashMap<>();
                controller.authorsCFSVD = new HashMap<>();
                controller.authorsHybrid = new HashMap<>();

                status_Label.setText("Recommending...");

                //<editor-fold defaultstate="collapsed" desc="Step 1: get algorithm_Recommendation Set">
                algorithm_Recommendation.clear();
                if (CB_CheckBox.isSelected()) {
                    algorithm_Recommendation.add(1);
                }
                if (CFP_CheckBox.isSelected()) {
                    algorithm_Recommendation.add(2);
                }
                if (HB_CheckBox.isSelected()) {
                    algorithm_Recommendation.add(3);
                }
                //</editor-fold>

                if (algorithm_Recommendation.size() > 0) {

                    //<editor-fold defaultstate="collapsed" desc="Step 2: recommend with choosed algorithms">
                    for (Integer alg : algorithm_Recommendation) {
                        if (alg == 1) {
                            //content - based
                            controller.algorithm_Recommendation = 1;
                            controller.combinePaperOfAuthor = dialogConfigCB.combineAuthor;
                            controller.weightingPaperOfAuthor = dialogConfigCB.weightingAuthor;
                            controller.timeAware = dialogConfigCB.timeAware;
                            controller.gamma = dialogConfigCB.gamma;
                            controller.combineCandiatePaper = dialogConfigCB.combinePaper;
                            controller.weightingCandidatePaper = dialogConfigCB.weightingPaper;
                            controller.pruning = dialogConfigCB.pruning;
                            controller.guiHandlerRequest(Options.RECOMMEND);
                            for (String authorId : controller.authors.keySet()) {
                                Author author = new Author();
                                HashMap<String, Float> cbfSimHM = controller.authors.get(authorId).getCbfSimHM();
                                HashMap<String, Float> cbfSimHM1 = new HashMap<>();
                                for (String Id : cbfSimHM.keySet()) {
                                    cbfSimHM1.put(Id, cbfSimHM.get(Id));
                                }
                                author.setCbfSimHM(cbfSimHM1);
                                author.setGroundTruth(controller.authors.get(authorId).getGroundTruth());
                                author.setAuthorId(controller.authors.get(authorId).getAuthorId());
                                controller.authorsCB.put(authorId, author);
                            }
                        } else if (alg == 2) {
                            //CF
                            controller.algorithm_Recommendation = 2;
                            HashSet<Integer> cfMethodHS = new HashSet<>();
                            HashMap<Integer, Integer> kNeighborHM = new HashMap<>();
                            cfMethodHS = dialogConfigCF.cfMethodHS;
                            kNeighborHM = dialogConfigCF.kNeighborHM;

                            for (Integer cfMethod : cfMethodHS) {
                                if (cfMethod == 1) {
                                    controller.cfMethod = 1;
                                    controller.kNeighbourhood = kNeighborHM.get(1);
                                    controller.guiHandlerRequest(Options.RECOMMEND);
                                    for (String authorId : controller.authors.keySet()) {
                                        Author author = new Author();
                                        HashMap<String, Float> cfRatingHM = controller.authors.get(authorId).getCfRatingHM();
                                        HashMap<String, Float> cfRatingHM1 = new HashMap<>();
                                        for (String Id : cfRatingHM.keySet()) {
                                            cfRatingHM1.put(Id, cfRatingHM.get(Id));
                                        }
                                        author.setCfRatingHM(cfRatingHM1);
                                        author.setGroundTruth(controller.authors.get(authorId).getGroundTruth());
                                        author.setAuthorId(controller.authors.get(authorId).getAuthorId());
                                        controller.authorsCFP.put(authorId, author);
                                    }
                                } else if (cfMethod == 2) {
                                    controller.cfMethod = 2;
                                    controller.kNeighbourhood = kNeighborHM.get(2);
                                    controller.guiHandlerRequest(Options.RECOMMEND);
                                    for (String authorId : controller.authors.keySet()) {
                                        Author author = new Author();
                                        HashMap<String, Float> cfRatingHM = controller.authors.get(authorId).getCfRatingHM();
                                        HashMap<String, Float> cfRatingHM1 = new HashMap<>();
                                        for (String Id : cfRatingHM.keySet()) {
                                            cfRatingHM1.put(Id, cfRatingHM.get(Id));
                                        }
                                        author.setCfRatingHM(cfRatingHM1);
                                        author.setGroundTruth(controller.authors.get(authorId).getGroundTruth());
                                        author.setAuthorId(controller.authors.get(authorId).getAuthorId());
                                        controller.authorsCFC.put(authorId, author);
                                    }
                                } else if (cfMethod == 3) {
                                    controller.cfMethod = 3;
                                    controller.kNeighbourhood = kNeighborHM.get(3);
                                    controller.guiHandlerRequest(Options.RECOMMEND);
                                    for (String authorId : controller.authors.keySet()) {
                                        Author author = new Author();
                                        HashMap<String, Float> cfRatingHM = controller.authors.get(authorId).getCfRatingHM();
                                        HashMap<String, Float> cfRatingHM1 = new HashMap<>();
                                        for (String Id : cfRatingHM.keySet()) {
                                            cfRatingHM1.put(Id, cfRatingHM.get(Id));
                                        }
                                        author.setCfRatingHM(cfRatingHM1);
                                        author.setGroundTruth(controller.authors.get(authorId).getGroundTruth());
                                        author.setAuthorId(controller.authors.get(authorId).getAuthorId());
                                        controller.authorsCFSVD.put(authorId, author);
                                    }
                                }
                            }

                        } else if (alg == 3) {
                            //CBFCFHybrid
                            controller.algorithm_Recommendation = 3;
                            controller.alpha = dialogConfigHybrid.alpha;
                            controller.combineHybrid = dialogConfigHybrid.combineHybrid;
                            controller.guiHandlerRequest(Options.RECOMMEND);
                            for (String authorId : controller.authors.keySet()) {
                                Author author = new Author();

                                HashMap<String, Float> cbfSimHM = controller.authors.get(authorId).getCbfSimHM();
                                HashMap<String, Float> cbfSimHM1 = new HashMap<>();
                                for (String Id : cbfSimHM.keySet()) {
                                    cbfSimHM1.put(Id, cbfSimHM.get(Id));
                                }
                                author.setCbfSimHM(cbfSimHM1);

                                HashMap<String, Float> cfRatingHM = controller.authors.get(authorId).getCfRatingHM();
                                HashMap<String, Float> cfRatingHM1 = new HashMap<>();
                                for (String Id : cfRatingHM.keySet()) {
                                    cfRatingHM1.put(Id, cfRatingHM.get(Id));
                                }
                                author.setCfRatingHM(cfRatingHM1);

                                HashMap<String, Float> CbfCfHybridHM = controller.authors.get(authorId).getCbfCfHybridHM();
                                HashMap<String, Float> CbfCfHybridHM1 = new HashMap<>();
                                for (String Id : CbfCfHybridHM.keySet()) {
                                    CbfCfHybridHM1.put(Id, CbfCfHybridHM.get(Id));
                                }
                                author.setCbfCfHybridHM(CbfCfHybridHM1);
                                author.setGroundTruth(controller.authors.get(authorId).getGroundTruth());
                                author.setAuthorId(controller.authors.get(authorId).getAuthorId());
                                controller.authorsHybrid.put(authorId, author);
                            }
                        }
                    }
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="Step 3: load recommendation list to table">
                    for (Integer alg : algorithm_Recommendation) {
                        if (alg == 1) {
                            try {
                                FeatureVectorSimilarity.generateRecommendationForAuthorList(controller.authorsCB, controller.topRecommend);
                            } catch (Exception ex) {
                                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Vector vTitle = new Vector(Arrays.asList(new String[]{"No.", "Id Author", "Recommendation List"}));
                            Vector vData = new Vector();
                            int i = 0;
                            for (String AuthorId : controller.authorsCB.keySet()) {
                                i++;
                                Vector vector = new Vector();
                                vector.addElement(i);
                                vector.addElement(controller.authorsCB.get(AuthorId).getAuthorId());
                                vector.addElement(controller.authorsCB.get(AuthorId).getRecommendationList());
                                vData.add(vector);
                            }
                            JTable contentbased_Table = new JTable(new DefaultTableModel(vData, vTitle));
                            contentbased_Table.setAutoCreateRowSorter(true);
                            contentbased_Table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                            contentbased_Table.setAutoscrolls(true);
                            contentbased_Table.setFont(new Font("Tahoma", Font.PLAIN, 13));
                            contentbased_Table.getColumnModel().getColumn(2).setPreferredWidth(620);

                            JScrollPane scrollPane = new JScrollPane(contentbased_Table);
                            recList_TabbedPane.addTab("Content - based", scrollPane);
                        } else if (alg == 2) {
                            HashSet<Integer> cfMethodHS = new HashSet<>();
                            cfMethodHS = dialogConfigCF.cfMethodHS;
                            for (Integer cfMethod : cfMethodHS) {
                                if (cfMethod == 1) {
                                    try {
                                        CF.cfRecommendToAuthorList(controller.authorsCFP, controller.topRecommend);
                                    } catch (TasteException ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (Exception ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    Vector vTitle = new Vector(Arrays.asList(new String[]{"No.", "Id Author", "Recommendation List"}));
                                    Vector vData = new Vector();
                                    int i = 0;
                                    for (String AuthorId : controller.authorsCFP.keySet()) {
                                        i++;
                                        Vector vector = new Vector();
                                        vector.addElement(i);
//                                        System.out.println("id author " + controller.authors.get(AuthorId).getAuthorId());
                                        vector.addElement(controller.authorsCFP.get(AuthorId).getAuthorId());
                                        vector.addElement(controller.authorsCFP.get(AuthorId).getRecommendationList());
                                        vData.add(vector);
                                    }
                                    JTable cfp_Table = new JTable(new DefaultTableModel(vData, vTitle));
                                    cfp_Table.setAutoCreateRowSorter(true);
                                    cfp_Table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                                    cfp_Table.setAutoscrolls(true);
                                    cfp_Table.setFont(new Font("Tahoma", Font.PLAIN, 13));
                                    cfp_Table.getColumnModel().getColumn(2).setPreferredWidth(620);

                                    JScrollPane scrollPane = new JScrollPane(cfp_Table);
                                    recList_TabbedPane.addTab("CF using KNN Pearson", scrollPane);
                                } else if (cfMethod == 2) {
                                    try {
                                        CF.cfRecommendToAuthorList(controller.authorsCFC, controller.topRecommend);
                                    } catch (TasteException ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (Exception ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    Vector vTitle = new Vector(Arrays.asList(new String[]{"No.", "Id Author", "Recommendation List"}));
                                    Vector vData = new Vector();
                                    int i = 0;
                                    for (String AuthorId : controller.authorsCFC.keySet()) {
                                        i++;
                                        Vector vector = new Vector();
                                        vector.addElement(i);
//                                        System.out.println("id author " + controller.authors.get(AuthorId).getAuthorId());
                                        vector.addElement(controller.authorsCFC.get(AuthorId).getAuthorId());
                                        vector.addElement(controller.authorsCFC.get(AuthorId).getRecommendationList());
                                        vData.add(vector);
                                    }
                                    JTable cfc_Table = new JTable(new DefaultTableModel(vData, vTitle));
                                    cfc_Table.setAutoCreateRowSorter(true);
                                    cfc_Table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                                    cfc_Table.setAutoscrolls(true);
                                    cfc_Table.setFont(new Font("Tahoma", Font.PLAIN, 13));
                                    cfc_Table.getColumnModel().getColumn(2).setPreferredWidth(620);

                                    JScrollPane scrollPane = new JScrollPane(cfc_Table);
                                    recList_TabbedPane.addTab("CF using KNN Cosine", scrollPane);
                                } else if (cfMethod == 3) {
                                    try {
                                        CF.cfRecommendToAuthorList(controller.authorsCFSVD, controller.topRecommend);
                                    } catch (TasteException ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (Exception ex) {
                                        Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    Vector vTitle = new Vector(Arrays.asList(new String[]{"No.", "Id Author", "Recommendation List"}));
                                    Vector vData = new Vector();
                                    int i = 0;
                                    for (String AuthorId : controller.authorsCFSVD.keySet()) {
                                        i++;
                                        Vector vector = new Vector();
                                        vector.addElement(i);
//                                        System.out.println("id author " + controller.authors.get(AuthorId).getAuthorId());
                                        vector.addElement(controller.authorsCFSVD.get(AuthorId).getAuthorId());
                                        vector.addElement(controller.authorsCFSVD.get(AuthorId).getRecommendationList());
                                        vData.add(vector);
                                    }
                                    JTable cfsvd_Table = new JTable(new DefaultTableModel(vData, vTitle));
                                    cfsvd_Table.setAutoCreateRowSorter(true);
                                    cfsvd_Table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                                    cfsvd_Table.setAutoscrolls(true);
                                    cfsvd_Table.setFont(new Font("Tahoma", Font.PLAIN, 13));
                                    cfsvd_Table.getColumnModel().getColumn(2).setPreferredWidth(620);

                                    JScrollPane scrollPane = new JScrollPane(cfsvd_Table);
                                    recList_TabbedPane.addTab("CF using SVD", scrollPane);
                                }
                            }
                        } else if (alg == 3) {
                            try {
                                CBFCF.cbfcfHybridRecommendToAuthorList(controller.authorsHybrid, controller.topRecommend);
                            } catch (TasteException ex) {
                                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (Exception ex) {
                                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            Vector vTitle = new Vector(Arrays.asList(new String[]{"No.", "Id Author", "Recommendation List"}));
                            Vector vData = new Vector();
                            int i = 0;
                            for (String AuthorId : controller.authorsHybrid.keySet()) {
                                i++;
                                Vector vector = new Vector();
                                vector.addElement(i);
                                vector.addElement(controller.authorsHybrid.get(AuthorId).getAuthorId());
                                vector.addElement(controller.authorsHybrid.get(AuthorId).getRecommendationList());
                                vData.add(vector);
                            }
                            JTable hybrid_Table = new JTable(new DefaultTableModel(vData, vTitle));
                            hybrid_Table.setAutoCreateRowSorter(true);
                            hybrid_Table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                            hybrid_Table.setAutoscrolls(true);
                            hybrid_Table.setFont(new Font("Tahoma", Font.PLAIN, 13));
                            hybrid_Table.getColumnModel().getColumn(2).setPreferredWidth(620);

                            JScrollPane scrollPane = new JScrollPane(hybrid_Table);
                            recList_TabbedPane.addTab("Hybrid", scrollPane);
                        }
                    }
            //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="Step 4: list choosed algorithms">
                    StringBuilder algorithms = new StringBuilder();
                    for (Integer alg : algorithm_Recommendation) {
                        if (alg == 1) {
                            algorithms.append("Content - based").append("; ");
                        } else if (alg == 2) {
                            HashSet<Integer> cfMethodHS = new HashSet<>();
                            cfMethodHS = dialogConfigCF.cfMethodHS;
                            for (Integer cfMethod : cfMethodHS) {
                                if (cfMethod == 1) {
                                    algorithms.append("CF using KNN Pearson").append("; ");
                                } else if (cfMethod == 2) {
                                    algorithms.append("CF using KNN Cosine").append("; ");
                                } else if (cfMethod == 3) {
                                    algorithms.append("CF using SVD").append("; ");
                                }
                            }
                        } else if (alg == 3) {
                            algorithms.append("Hybrid").append(" ");
                        }
                    }
                    algorithms.append(" with Top Recommendation equals " + controller.topRecommend);
                    recommended_algorithm_TextField.setText(algorithms.toString());
                    recommended_algorithm_TextField.setToolTipText(recommended_algorithm_TextField.getText());
                    //</editor-fold>

                    step2 = true;

                    evaluationList.clear();
                    DefaultTableModel tablemodelReset = (DefaultTableModel) evaluationResult_Table.getModel();
                    int rc = tablemodelReset.getRowCount();
                    for (int i = 0; i < rc; i++) {
                        tablemodelReset.removeRow(0);
                    }
                    evaluationResult_Table.setModel(tablemodelReset);

                    back_Button.setEnabled(false);
                    next_Button.setEnabled(false);
                    backNext = 0;
                    topRank_TextField.setText(top_Recommend_TextField.getText());

                    status_Label.setText("Generating recommendation list is successed, please choose tab Evaluation to evaluate algorithms.");
                    //  JOptionPane.showMessageDialog(rootPane, "Recommending is successed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                    int comfirm = JOptionPane.showConfirmDialog(rootPane, "Recommending is successed! Go to Step 3...", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (comfirm == JOptionPane.YES_OPTION) {
                        Steps_TabbedPane.setSelectedIndex(2);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "No recommendation algorithms aren't choosed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please input Top Recommendation...", "Notice", JOptionPane.INFORMATION_MESSAGE);
                top_Recommend_TextField.requestFocus();

            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please import dataset...", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_recommend_ButtonActionPerformed

    private void saveEvaluation_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEvaluation_ButtonActionPerformed
        String path = GuiUtilities.saveToFileJChooser();
        if (path != null) {
            if (evaluationResult_Table.getRowCount() > 0) {
                StringBuilder recList = new StringBuilder();
                for (int i = 0; i < evaluationResult_Table.getRowCount(); i++) {
                    recList.append(evaluationResult_Table.getValueAt(i, 0)).append(",")
                            .append(evaluationResult_Table.getValueAt(i, 1)).append(",")
                            .append(evaluationResult_Table.getValueAt(i, 2)).append(",")
                            .append(evaluationResult_Table.getValueAt(i, 3)).append("\r\n");
                }
                try {
                    FileUtils.writeStringToFile(new File(path), recList.toString(), "UTF8", false);
                    status_Label.setText("Saving evaluation result is successed!");
                    JOptionPane.showMessageDialog(rootPane, "Saving evaluation result is successed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "No data to save...", "Notice", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveEvaluation_ButtonActionPerformed

    private void config_HB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_config_HB_ButtonActionPerformed
        dialogConfigHybrid.setLocationRelativeTo(this);
        dialogConfigHybrid.show();
    }//GEN-LAST:event_config_HB_ButtonActionPerformed

    private void saveRecList_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRecList_ButtonActionPerformed

        //<editor-fold defaultstate="collapsed" desc="save Recommendation List">
        String path = GuiUtilities.saveToFileJChooser();
        if (path != null) {
            if (recList_TabbedPane.getTabCount() > 0) {
                int selected = recList_TabbedPane.getSelectedIndex();
                StringBuilder recList = new StringBuilder();
                JScrollPane jscrollpane = (JScrollPane) recList_TabbedPane.getComponent(selected);
                JViewport viewport = jscrollpane.getViewport();
                JTable tempTable = (JTable) viewport.getView();
                for (int i = 0; i < tempTable.getRowCount(); i++) {
                    recList.append(tempTable.getValueAt(i, 0)).append("|||")
                            .append(tempTable.getValueAt(i, 1)).append("|||")
                            .append(tempTable.getValueAt(i, 2)).append("\r\n");
                }
                try {
                    FileUtils.writeStringToFile(new File(path), recList.toString(), "UTF8", false);
                    status_Label.setText("Saving recommendation list is successed!");
                    JOptionPane.showMessageDialog(rootPane, "Saving recommendation list is successed!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "No data to save...", "Notice", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_saveRecList_ButtonActionPerformed

    private void fileAuthor_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAuthor_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_fileAuthor_TextAreaKeyPressed

    private void fileAuthorPaper_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAuthorPaper_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_fileAuthorPaper_TextAreaKeyPressed

    private void fileAuthorCitePaper_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAuthorCitePaper_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_fileAuthorCitePaper_TextAreaKeyPressed

    private void filePaper_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filePaper_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_filePaper_TextAreaKeyPressed

    private void filePaperCitePaper_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filePaperCitePaper_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_filePaperCitePaper_TextAreaKeyPressed

    private void fileGroundTruth_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileGroundTruth_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_fileGroundTruth_TextAreaKeyPressed

    private void console_TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_console_TextAreaKeyPressed
        evt.consume();
    }//GEN-LAST:event_console_TextAreaKeyPressed

    private void recommended_algorithm_TextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recommended_algorithm_TextFieldKeyPressed
        evt.consume();
    }//GEN-LAST:event_recommended_algorithm_TextFieldKeyPressed

    private void recommended_algorithm_TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recommended_algorithm_TextFieldKeyTyped
        evt.consume();
    }//GEN-LAST:event_recommended_algorithm_TextFieldKeyTyped

    private void fileAuthor_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAuthor_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_fileAuthor_TextAreaKeyTyped

    private void fileAuthorPaper_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAuthorPaper_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_fileAuthorPaper_TextAreaKeyTyped

    private void fileAuthorCitePaper_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAuthorCitePaper_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_fileAuthorCitePaper_TextAreaKeyTyped

    private void filePaper_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filePaper_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_filePaper_TextAreaKeyTyped

    private void filePaperCitePaper_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filePaperCitePaper_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_filePaperCitePaper_TextAreaKeyTyped

    private void fileGroundTruth_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileGroundTruth_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_fileGroundTruth_TextAreaKeyTyped

    private void console_TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_console_TextAreaKeyTyped
        evt.consume();
    }//GEN-LAST:event_console_TextAreaKeyTyped

    private void resetSystem_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSystem_MenuItemActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFramePRS().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_resetSystem_MenuItemActionPerformed

    private void exit_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_MenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit_MenuItemActionPerformed

    private void buildTFIDF_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildTFIDF_MenuItemActionPerformed
        DialogBuildTFIDF tf_idf = new DialogBuildTFIDF(this, rootPaneCheckingEnabled);
        tf_idf.setLocationRelativeTo(this);
        tf_idf.show();
    }//GEN-LAST:event_buildTFIDF_MenuItemActionPerformed

    private void visualize_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualize_MenuActionPerformed
        String path = "Temp\\EvaluationResult.txt";
        if (new File(path).exists()) {
            FileUtils.deleteQuietly(new File(path));
        } else {
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < evaluationList.size(); i++) {
                stringBuilder.append(evaluationList.get(i).toString().replace("\t", ","));
            }
            try {
                FileUtils.writeStringToFile(new File(path), stringBuilder.toString(), "UTF-8", true);
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            DialogVisualize visualize = new DialogVisualize();
            visualize.setLocationRelativeTo(this);
            visualize.show();
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_visualize_MenuActionPerformed

    private void visualize_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualize_MenuItemActionPerformed
        String path = "Temp\\EvaluationResult.txt";
        if (new File(path).exists()) {
            FileUtils.deleteQuietly(new File(path));
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < evaluationList.size(); i++) {
                stringBuilder.append(evaluationList.get(i));
            }
            try {
                FileUtils.writeStringToFile(new File(path), stringBuilder.toString(), "UTF-8", true);
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < evaluationList.size(); i++) {
                stringBuilder.append(evaluationList.get(i));
            }
            try {
                FileUtils.writeStringToFile(new File(path), stringBuilder.toString(), "UTF-8", true);
            } catch (IOException ex) {
                Logger.getLogger(MainFramePRS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        DialogVisualize visualize = new DialogVisualize();
        visualize.setLocationRelativeTo(this);
        visualize.show();
    }//GEN-LAST:event_visualize_MenuItemActionPerformed

    private void about_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_MenuItemActionPerformed
        DiaglogAbout dialogAbout = new DiaglogAbout(this, rootPaneCheckingEnabled);
        dialogAbout.setLocationRelativeTo(this);
        dialogAbout.show();
    }//GEN-LAST:event_about_MenuItemActionPerformed

    private void back_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_ButtonActionPerformed
        if (backNext > 1) {
            next_Button.setEnabled(true);
            backNext--;
            String temp = (String) evaluationList.get(backNext);
            loadStringToTable(temp);
        } else if (backNext == 1) {
            backNext--;
            String temp = (String) evaluationList.get(backNext);
            loadStringToTable(temp);
            back_Button.setEnabled(false);
            next_Button.setEnabled(true);
        }
    }//GEN-LAST:event_back_ButtonActionPerformed

    private void next_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_ButtonActionPerformed
        if (backNext < evaluationList.size() - 2) {
            back_Button.setEnabled(true);
            backNext++;
            String temp = (String) evaluationList.get(backNext);
            loadStringToTable(temp);
        } else if (backNext == evaluationList.size() - 2) {
            backNext++;
            String temp = (String) evaluationList.get(backNext);
            loadStringToTable(temp);
            next_Button.setEnabled(false);
            back_Button.setEnabled(true);
        }
    }//GEN-LAST:event_next_ButtonActionPerformed

    public void loadStringToTable(String temp) {
        DefaultTableModel tablemodelReset = (DefaultTableModel) evaluationResult_Table.getModel();
        int rc = tablemodelReset.getRowCount();
        for (int i = 0; i < rc; i++) {
            tablemodelReset.removeRow(0);
        }
        evaluationResult_Table.setModel(tablemodelReset);
        String[] str = temp.split("\r\n");
        for (int i = 0; i < str.length; i++) {
            Vector vector = new Vector();
            String[] str1 = str[i].split("\t");
            if (str1.length == 4) {
                for (int j = 0; j < str1.length; j++) {
                    vector.addElement(str1[j]);
                }
                tablemodelReset.addRow(vector);
            }
        }
        evaluationResult_Table.setModel(tablemodelReset);
        evaluationResult_Table.validate();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            System.out.println("Unable to load Windows look and feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFramePRS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CB_CheckBox;
    private javax.swing.JCheckBox CFP_CheckBox;
    private javax.swing.JCheckBox HB_CheckBox;
    private javax.swing.JTabbedPane Steps_TabbedPane;
    private javax.swing.JButton TFIDF_Button;
    private javax.swing.JMenuItem about_MenuItem;
    private javax.swing.JButton back_Button;
    private javax.swing.JMenuItem buildTFIDF_MenuItem;
    private javax.swing.JButton config_CB_Button;
    private javax.swing.JButton config_CF_Button;
    private javax.swing.JButton config_HB_Button;
    private javax.swing.JTextArea console_TextArea;
    private javax.swing.JButton evaluate_Button;
    private javax.swing.JTable evaluationResult_Table;
    private javax.swing.JMenuItem exit_MenuItem;
    private javax.swing.JCheckBox f1_CheckBox;
    private javax.swing.JButton fileAuthorCitePaper_Button;
    private javax.swing.JTextArea fileAuthorCitePaper_TextArea;
    private javax.swing.JButton fileAuthorPaper_Button;
    private javax.swing.JTextArea fileAuthorPaper_TextArea;
    private javax.swing.JButton fileAuthor_Button;
    private javax.swing.JTextArea fileAuthor_TextArea;
    private javax.swing.JButton fileGroundTruth_Button;
    private javax.swing.JTextArea fileGroundTruth_TextArea;
    private javax.swing.JButton filePaperCitePaper_Button;
    private javax.swing.JTextArea filePaperCitePaper_TextArea;
    private javax.swing.JButton filePaper_Button;
    private javax.swing.JTextArea filePaper_TextArea;
    private javax.swing.JMenu file_Menu;
    private javax.swing.JMenu help_Menu;
    private javax.swing.JMenuItem howtouse_MenuItem;
    private javax.swing.JButton import_DataSource_Button;
    private javax.swing.JButton import_DatasetExample_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBox map_CheckBox;
    private javax.swing.JCheckBox mrr_CheckBox;
    private javax.swing.JCheckBox ndcg_CheckBox;
    private javax.swing.JButton next_Button;
    private javax.swing.JCheckBox precision_CheckBox;
    private javax.swing.JTabbedPane recList_TabbedPane;
    private javax.swing.JCheckBox recall_CheckBox;
    private javax.swing.JButton recommend_Button;
    private javax.swing.JTextField recommended_algorithm_TextField;
    private javax.swing.JMenuItem resetSystem_MenuItem;
    private javax.swing.JButton reset_Button;
    private javax.swing.JButton saveEvaluation_Button;
    private javax.swing.JButton saveRecList_Button;
    private javax.swing.JLabel status_Label;
    private javax.swing.JPanel status_Panel;
    private javax.swing.JTextField topRank_TextField;
    private javax.swing.JTextField top_Recommend_TextField;
    private javax.swing.JButton visualize_Button;
    private javax.swing.JMenu visualize_Menu;
    private javax.swing.JMenuItem visualize_MenuItem;
    // End of variables declaration//GEN-END:variables
}
